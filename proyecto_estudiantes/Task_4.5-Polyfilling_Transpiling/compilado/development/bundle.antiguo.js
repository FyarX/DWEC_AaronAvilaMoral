/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/Asignatura.js":
/*!**************************!*\
  !*** ./js/Asignatura.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Asignatura: () => (/* binding */ Asignatura)\n/* harmony export */ });\n/**\r\n * Representa una asignatura.\r\n * @class\r\n */\nclass Asignatura {\n  #nombre;\n  #calificaciones;\n\n  /**\r\n   * Crea una nueva instancia de Asignatura.\r\n   * @constructor\r\n   * @param {string} nombre - El nombre de la asignatura. Solo se permiten letras y espacios.\r\n   */\n  constructor(nombre) {\n    // Filtrado de nombres\n    this.#nombre = nombre.match(/^[A-Za-zÁÉÍÓÚáéíóú ]+$/) ? nombre : \"Sin nombre\"; // Solo acepta letras y espacios\n\n    this.#calificaciones = [];\n  }\n\n  /**\r\n   * Calcula el promedio de las calificaciones si existen.\r\n   * @returns {number} El promedio de las calificaciones o 0 si no hay calificaciones.\r\n   */\n  calculaPromedio() {\n    // Comprueba si hay calificaciones\n    let longArray = this.#calificaciones.length;\n    if (longArray > 0) {\n      let sumArray = 0;\n      for (let i = 0; i < longArray; i++) {\n        sumArray += this.#calificaciones[i];\n      }\n\n      // Devuelve la media de las calificaciones\n      return sumArray / longArray;\n    } else {\n      console.log(\"No existen calificaciones\");\n      return 0;\n    }\n  }\n\n  /**\r\n   * Agrega una calificación a la asignatura.\r\n   * @param {number} nota - La calificación a agregar (debe estar entre 0 y 10).\r\n   * @throws {Error} Si la calificación no está en el rango permitido.\r\n   */\n  calificar(nota) {\n    if (0 <= nota && nota <= 10) {\n      // Agrega la calificación al array\n      this.#calificaciones.push(nota);\n    } else {\n      throw new Error(\"La calificación debe estar entre 0 y 10.\");\n    }\n  }\n\n  /**\r\n   * Elimina una calificación de la asignatura.\r\n   * @param {number} nota - La calificación a eliminar.\r\n   * @throws {Error} Si la calificación no existe en la lista.\r\n   */\n  eliminarCalificacion(nota) {\n    if (this.#calificaciones.includes(nota)) {\n      // Separa del array las entradas con la calificación que se indique\n      this.#calificaciones.splice(this.#calificaciones.indexOf(nota), 1);\n    } else {\n      throw new Error(\"La nota no puede ser eliminada ya que no existe\");\n    }\n  }\n\n  // <<<<<<<<<<<<<<<<< Getters de la clase <<<<<<<<<<<<<<<<<<<<<\n\n  /**\r\n   * Obtiene el nombre de la asignatura.\r\n   * @type {string}\r\n   * @readonly\r\n   */\n  get nombre() {\n    return this.#nombre;\n  }\n\n  /**\r\n   * Obtiene las calificaciones de la asignatura.\r\n   * @type {number[]}\r\n   * @readonly\r\n   */\n  get calificaciones() {\n    return this.#calificaciones;\n  }\n\n  /**\r\n   * Convierte la información de la asignatura en una cadena de texto.\r\n   * @returns {string} Una representación en texto de la asignatura.\r\n   */\n  toString() {\n    return `Asignatura: ${this.nombre}`;\n  }\n}\n\n//# sourceURL=webpack://main/./js/Asignatura.js?");

/***/ }),

/***/ "./js/Direccion.js":
/*!*************************!*\
  !*** ./js/Direccion.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direccion: () => (/* binding */ Direccion)\n/* harmony export */ });\n/**\r\n * Representa una dirección.\r\n * @class\r\n */\nclass Direccion {\n  #calle;\n  #numero;\n  #piso;\n  #cp;\n  #localidad;\n  #provincia;\n\n  /**\r\n   * @param {string} calle - Nombre de la calle.\r\n   * @param {string} provincia - Nombre de la provincia.\r\n   * @param {number} numero - Número de la vivienda.\r\n   * @param {string} piso - Número de piso.\r\n   * @param {number} cp - Código postal.\r\n   * @param {string} localidad - Nombre de la localidad.\r\n   * \r\n   */\n\n  constructor(calle, numero, piso, cp, localidad, provincia) {\n    this.#calle = calle;\n    this.#numero = numero;\n    this.#piso = piso;\n    this.#cp = cp;\n    this.#provincia = provincia;\n    this.#localidad = localidad;\n  }\n\n  /**\r\n   * Obtiene la calle.\r\n   * @returns {string} La calle.\r\n   */\n  get calle() {\n    return this.#calle;\n  }\n\n  /**\r\n   * Obtiene el número.\r\n   * @returns {number} \r\n   */\n  get numero() {\n    return this.#numero;\n  }\n\n  /**\r\n   * Obtiene el piso.\r\n   * @returns {string} \r\n   */\n  get piso() {\n    return this.#piso;\n  }\n\n  /**\r\n   * Obtiene el código postal.\r\n   * @returns {string}\r\n   */\n  get cp() {\n    return this.#cp;\n  }\n\n  /**\r\n   * Obtiene la provincia.\r\n   * @returns {string}\r\n   */\n  get provincia() {\n    return this.#provincia;\n  }\n\n  /**\r\n   * Obtiene la localidad.\r\n   * @returns {string}\r\n   */\n  get localidad() {\n    return this.#localidad;\n  }\n\n  /**\r\n   * Representa la dirección como una cadena.\r\n   * @returns {string} Una cadena con la dirección completa.\r\n   */\n  toString() {\n    return `Calle: ${this.#calle}, Número: ${this.#numero}, Piso: ${this.#piso}, Código Postal: ${this.#cp}, Localidad: ${this.#localidad}(${this.#provincia})`;\n  }\n}\n\n//# sourceURL=webpack://main/./js/Direccion.js?");

/***/ }),

/***/ "./js/Estudiante.js":
/*!**************************!*\
  !*** ./js/Estudiante.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Estudiante: () => (/* binding */ Estudiante)\n/* harmony export */ });\n/* harmony import */ var _Persona_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Persona.js */ \"./js/Persona.js\");\n\n\n/**\r\n * Representa un estudiante que hereda de Persona.\r\n * @extends Persona\r\n * @class\r\n */\nclass Estudiante extends _Persona_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n  #id;\n  #asignaturas;\n  #relacion;\n  static contadorId = 1;\n\n  /**\r\n   * Crea una nueva instancia de Estudiante.\r\n   * @constructor\r\n   * @param {string} nombre - Nombre del estudiante.\r\n   * @param {number} edad - Edad del estudiante.\r\n   * @param {Direccion} direccion - Dirección del estudiante.\r\n   */\n  constructor(nombre, edad, direccion) {\n    super(nombre, edad, direccion);\n    this.#id = Estudiante.contadorId++;\n    this.#asignaturas = [];\n    this.#relacion = [];\n  }\n\n  /**\r\n   * Matricula al estudiante en una o más asignaturas.\r\n   * @param {...Asignatura} asignaturas - Las asignaturas en las que se matricula al estudiante.\r\n   */\n  matricularEstudiante() {\n    for (var _len = arguments.length, asignaturas = new Array(_len), _key = 0; _key < _len; _key++) {\n      asignaturas[_key] = arguments[_key];\n    }\n    for (let asignatura of asignaturas) {\n      this.#asignaturas.push(asignatura);\n      this.#relacion.push([`Matriculación de ${asignatura.nombre}`, new Date()]);\n    }\n  }\n\n  /**\r\n   * Desmatricula al estudiante de una o más asignaturas.\r\n   * @param {...Asignatura} asignaturas - Las asignaturas de las que se desmatricula al estudiante.\r\n   */\n  desmatricularEstudiante() {\n    for (var _len2 = arguments.length, asignaturas = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      asignaturas[_key2] = arguments[_key2];\n    }\n    for (let asignatura of asignaturas) {\n      this.#asignaturas = this.#asignaturas.filter(a => a.nombre !== asignatura.nombre);\n      this.#relacion.push([`Desmatriculación de ${asignatura.nombre}`, new Date()]);\n    }\n  }\n\n  /**\r\n   * Califica al estudiante en una asignatura.\r\n   * @param {Asignatura} asignatura - La asignatura que se calificará.\r\n   * @param {number} nota - La nota que se asignará.\r\n   * @throws {Error} Si no hay nota o no es válida, o si el estudiante no está matriculado.\r\n   */\n  calificar(asignatura, nota) {\n    if (arguments.length === 1) {\n      throw new Error(\"Faltan datos para calificar al estudiante\");\n    }\n    const asignaturaMatriculada = this.#asignaturas.find(a => a.nombre === asignatura.nombre);\n    if (!asignaturaMatriculada) {\n      throw new Error(\"El estudiante no está matriculado en esta asignatura\");\n    }\n    if (nota < 0 || nota > 10) {\n      throw new Error(\"La calificación debe estar entre 0 y 10.\");\n    }\n    asignaturaMatriculada.calificar(nota);\n  }\n\n  /**\r\n   * Devuelve el historial de acciones del estudiante.\r\n   * @returns {string[]} El historial de matriculaciones y desmatriculaciones.\r\n   */\n  get relacion() {\n    return this.#relacion.map(_ref => {\n      let [accion, fecha] = _ref;\n      const fechaFormateada = fecha.toLocaleDateString('es-ES', {\n        weekday: 'long',\n        day: '2-digit',\n        month: 'long',\n        year: 'numeric'\n      });\n      return `${accion} - ${fechaFormateada}`;\n    });\n  }\n\n  /**\r\n   * Calcula el promedio de calificaciones del estudiante.\r\n   * @returns {string} El promedio calculado.\r\n   */\n  promedioEstudiante() {\n    let sumatorio = 0;\n    let contador = 0;\n    for (let asignatura of this.#asignaturas) {\n      const promedioAsignatura = asignatura.calculaPromedio();\n      if (promedioAsignatura !== 0) {\n        sumatorio += promedioAsignatura;\n        contador++;\n      }\n    }\n    return contador === 0 ? 0 : `El promedio del estudiante es ${(sumatorio / contador).toFixed(2)}`;\n  }\n\n  /**\r\n   * Obtiene las asignaturas del estudiante.\r\n   * @returns {Asignatura[]} Las asignaturas del estudiante.\r\n   */\n  get asignaturas() {\n    return this.#asignaturas;\n  }\n\n  /**\r\n   * Representa al estudiante como una cadena.\r\n   * @returns {string} Una cadena con los datos del estudiante.\r\n   */\n  toString() {\n    return `Estudiante: ${this.nombre}, ID: ${this.#id}, Dirección: ${this.direccion}`;\n  }\n}\n\n//# sourceURL=webpack://main/./js/Estudiante.js?");

/***/ }),

/***/ "./js/ListadoAsignaturas.js":
/*!**********************************!*\
  !*** ./js/ListadoAsignaturas.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoAsignaturas: () => (/* binding */ ListadoAsignaturas)\n/* harmony export */ });\n/**\r\n * Representa un listado de asignaturas.\r\n * @class\r\n */\nclass ListadoAsignaturas {\n  #listaAsignaturas;\n\n  /**\r\n   * Crea una nueva instancia de ListadoAsignaturas.\r\n   * @constructor\r\n   * @param {...Asignatura} asignaturas - Las asignaturas a agregar inicialmente.\r\n   */\n  constructor() {\n    this.#listaAsignaturas = [];\n    for (var _len = arguments.length, asignaturas = new Array(_len), _key = 0; _key < _len; _key++) {\n      asignaturas[_key] = arguments[_key];\n    }\n    for (let asignatura of asignaturas) {\n      // Agrega las asignaturas que se pasan como parámetro\n      this.añadeAsignatura(asignatura);\n    }\n  }\n\n  /**\r\n   * Agrega una asignatura al listado.\r\n   * @param {Asignatura} asignatura - La asignatura a agregar.\r\n   */\n  agregaAsignatura(asignatura) {\n    this.#listaAsignaturas.push(asignatura);\n  }\n\n  /**\r\n   * Elimina una asignatura del listado.\r\n   * @param {Asignatura} asignatura - La asignatura a eliminar.\r\n   * @throws {Error} Si la asignatura no se encuentra en el listado.\r\n   */\n  eliminaAsignatura(asignatura) {\n    // Comprueba si la asignatura está en la lista\n    if (this.#listaAsignaturas.includes(asignatura)) {\n      // Filtra todas las asignaturas menos la que queremos eliminar\n      this.#listaAsignaturas.filter(a => a !== asignatura);\n      console.log(\"Asignatura eliminada con éxito\");\n    } else {\n      throw new Error(\"La asignatura no se encuentra en el listado\");\n    }\n  }\n\n  /**\r\n   * Busca asignaturas que coincidan parcialmente con un patrón.\r\n   * @param {string} patron - El patrón a buscar.\r\n   * @returns {Asignatura[]} Las asignaturas que coinciden con el patrón.\r\n   * @throws {Error} Si el patrón no es una cadena de texto.\r\n   */\n  busquedaAsignatura(patron) {\n    // Comprueba si el patrón es una cadena de texto\n    if (typeof patron !== \"string\") throw new Error(\"El patrón debe ser una cadena de texto\");\n    let patronAsignatura = new RegExp(patron, \"i\");\n    // Filtra las asignaturas que cumplen el patrón\n    return this.#listaAsignaturas.filter(asignatura => patronAsignatura.test(asignatura.nombre));\n  }\n\n  /**\r\n   * Obtiene la lista completa de asignaturas.\r\n   * @returns {Asignatura[]} El listado de asignaturas.\r\n   */\n  get listaAsignaturas() {\n    return this.#listaAsignaturas;\n  }\n}\n\n//# sourceURL=webpack://main/./js/ListadoAsignaturas.js?");

/***/ }),

/***/ "./js/ListadoEstudiantes.js":
/*!**********************************!*\
  !*** ./js/ListadoEstudiantes.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoEstudiantes: () => (/* binding */ ListadoEstudiantes)\n/* harmony export */ });\n/**\r\n * Representa un listado de estudiantes.\r\n * @class\r\n */\nclass ListadoEstudiantes {\n  #listaEstudiantes;\n\n  /**\r\n   * Crea una nueva instancia de ListadoEstudiantes.\r\n   * @constructor\r\n   * @param {...Estudiante} estudiantes - Los estudiantes a agregar inicialmente.\r\n   */\n  constructor() {\n    this.#listaEstudiantes = [];\n\n    // Agrega cada estudiante que se pase como parámetro al array creado previamente\n    for (var _len = arguments.length, estudiantes = new Array(_len), _key = 0; _key < _len; _key++) {\n      estudiantes[_key] = arguments[_key];\n    }\n    for (let estudiante of estudiantes) {\n      this.agregaEstudiante(estudiante);\n    }\n  }\n\n  /**\r\n   * Agrega un estudiante al listado.\r\n   * @param {Estudiante} estudiante - El estudiante a agregar.\r\n   * @throws {Error} Si el estudiante ya está en la lista.\r\n   */\n  agregaEstudiante(estudiante) {\n    // Comprueba si el estudiante ya está en la lista\n    if (this.#listaEstudiantes.includes(estudiante)) {\n      throw new Error(\"El estudiante ya se encuentra en la lista, no puede haber duplicados\");\n    } else {\n      this.#listaEstudiantes.push(estudiante);\n    }\n  }\n\n  /**\r\n   * Elimina un estudiante del listado.\r\n   * @param {Estudiante} estudiante - El estudiante a eliminar.\r\n   * @throws {Error} Si el estudiante no se encuentra en la lista.\r\n   */\n  eliminaEstudiante(estudiante) {\n    if (this.#listaEstudiantes.includes(estudiante)) {\n      // Filtra a todos los estudiantes menos el que queremos eliminar\n      this.#listaEstudiantes = this.#listaEstudiantes.filter(e => e !== estudiante);\n      console.log(\"Estudiante eliminado con éxito\");\n    } else {\n      throw new Error(\"El estudiante no se encuentra en el listado\");\n    }\n  }\n\n  /**\r\n   * Calcula el promedio general de todos los estudiantes.\r\n   * @returns {number|string} El promedio general o un mensaje si no hay estudiantes.\r\n   */\n  promedioEstudiantes() {\n    // Comprueba si hay estudiantes en la lista\n    if (this.#listaEstudiantes.length === 0) return \"No existe ningún estudiante en la lista\";\n    let sum = 0;\n    let contador = 0;\n    for (let estudiante of this.#listaEstudiantes) {\n      // Se obtiene la media de cada estudiante por separado\n      let promEstudiante = estudiante.promedioEstudiante();\n\n      // Si la media es un número, se suma al sumatorio y se incrementa el contador\n      if (typeof promEstudiante === \"number\") {\n        sum += promEstudiante;\n        contador++;\n      }\n    }\n    let promedioTotal = (sum / contador).toFixed(2);\n    return Number(promedioTotal);\n  }\n\n  /**\r\n   * Muestra un reporte con el nombre, calificaciones y promedio de cada estudiante.\r\n   */\n  reporte() {\n    // Recorre la lista de estudiantes y muestra su nombre, calificaciones y promedio\n    this.#listaEstudiantes.forEach(estudiante => {\n      console.log();\n      console.log(`Nombre del estudiante: ${estudiante.nombre}`);\n      console.log(`Calificaciones:`);\n      // Muestra las calificaciones de cada asignatura\n      estudiante.asignaturas.forEach(asignatura => {\n        const nota = Number(asignatura[1]);\n        console.log(`${asignatura.nombre}: ${nota}`);\n      });\n      console.log(`Promedio: ${estudiante.promedioEstudiante()}`);\n      console.log(\"--------------------------------\");\n    });\n  }\n\n  /**\r\n   * Busca estudiantes que coincidan parcialmente con un patrón.\r\n   * @param {string} patron - El patrón a buscar.\r\n   * @returns {Estudiante[]} Los estudiantes que coinciden con el patrón.\r\n   * @throws {Error} Si el patrón no es una cadena de texto.\r\n   */\n  busquedaEstudiante(patron) {\n    // Comprueba si el patrón es una cadena de texto\n    if (typeof patron !== \"string\") {\n      throw new Error(\"El patrón debe ser una cadena de texto\");\n    }\n\n    // Crea un patrón de búsqueda\n    let patronEstudiante = new RegExp(patron, \"i\");\n    // Devuelve todos los estudiantes que coinciden con el patrón\n    return this.#listaEstudiantes.filter(estudiante => patronEstudiante.test(estudiante.nombre));\n  }\n\n  /**\r\n   * Obtiene una copia de la lista de estudiantes.\r\n   * @returns {Estudiante[]} Una copia del listado de estudiantes.\r\n   */\n  getListadoEstudiantes() {\n    // Devuelve una copia de la lista de estudiantes\n    return [...this.#listaEstudiantes];\n  }\n}\n\n//# sourceURL=webpack://main/./js/ListadoEstudiantes.js?");

/***/ }),

/***/ "./js/Persona.js":
/*!***********************!*\
  !*** ./js/Persona.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Persona)\n/* harmony export */ });\n/**\r\n * Representa una persona genérica.\r\n * @class\r\n */\nclass Persona {\n  #nombre;\n  #edad;\n  #direccion;\n\n  /**\r\n   * Crea una nueva instancia de Persona.\r\n   * @constructor\r\n   * @param {string} nombre - Nombre de la persona.\r\n   * @param {number} edad - Edad de la persona.\r\n   * @param {Direccion} direccion - Dirección de la persona.\r\n   * @throws {Error} Si el nombre contiene caracteres no válidos.\r\n   */\n  constructor(nombre, edad, direccion) {\n    if (!nombre.match(/[A-Za-zÁÉÍÓÚáéíóú ]+/)) {\n      throw new Error(\"El nombre debe contener solo letras y espacios\");\n    } else {\n      this.#nombre = nombre;\n    }\n    this.#edad = edad;\n    this.#direccion = direccion;\n  }\n\n  /**\r\n   * Obtiene el nombre de la persona.\r\n   * @returns {string} El nombre de la persona.\r\n   */\n  get nombre() {\n    return this.#nombre;\n  }\n\n  /**\r\n   * Obtiene la edad de la persona.\r\n   * @returns {number} La edad de la persona.\r\n   */\n  get edad() {\n    return this.#edad;\n  }\n\n  /**\r\n   * Obtiene la dirección de la persona.\r\n   * @returns {Direccion} La dirección de la persona.\r\n   */\n  get direccion() {\n    return this.#direccion;\n  }\n}\n\n//# sourceURL=webpack://main/./js/Persona.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asignatura.js */ \"./js/Asignatura.js\");\n/* harmony import */ var _Direccion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Direccion.js */ \"./js/Direccion.js\");\n/* harmony import */ var _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListadoEstudiantes.js */ \"./js/ListadoEstudiantes.js\");\n/* harmony import */ var _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListadoAsignaturas.js */ \"./js/ListadoAsignaturas.js\");\n// Proyecto Gestión de Estudiantes y Asignaturas \n// Autor: Aarón Ávila Moral\n\n// Para ver repositorio completo:\n// https://github.com/FyarX/DWEC_AaronAvilaMoral\n\n// ************* IMPORTACIÓN DE FICHEROS ******************\n\n\n\n\n\n\n// ************* CONJUNTO DE PRUEBAS DE CORRECTO FUNCIONAMIENTO ******************\n\n/**\r\n * Prueba de interacción con estudiantes y asignaturas.\r\n * \r\n * Esta función realiza las siguientes operaciones:\r\n * - Crea listas de estudiantes y asignaturas.\r\n * - Añade estudiantes y asignaturas a sus respectivas listas.\r\n * - Matricula y desmatricula estudiantes en asignaturas.\r\n * - Califica a los estudiantes en distintas asignaturas.\r\n * - Elimina estudiantes y asignaturas.\r\n * \r\n * @description Función principal para validar las operaciones con estudiantes y asignaturas.\r\n */\nfunction prueba() {\n  console.log(\"-------------Pruebas de interacción con estudiantes y asignaturas-----------------\");\n\n  //? Creación de listas de estudiantes y de asignaturas\n\n  /**\r\n   * Lista de estudiantes creada.\r\n   * @type {ListadoEstudiantes}\r\n   */\n  let listaEstudiantes = new _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListadoEstudiantes();\n\n  /**\r\n   * Lista de asignaturas creada.\r\n   * @type {ListadoAsignaturas}\r\n   */\n  let listaAsignaturas = new _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__.ListadoAsignaturas();\n  console.log(\"Listas de estudiantes y asignaturas creadas con éxito\");\n\n  //? Creación de estudiantes/asignaturas y eliminación de ambos con las funciones eliminaEstdiante y eliminaAsignatura\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: David Rodríguez.\r\n   */\n  let estudiante1 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"David Rodríguez\", 25, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Dr. Vaca Castro\", 6, \"Quinto A\", 43242, \"Granada\", \"Granada\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Marta Sánchez.\r\n   */\n  let estudiante2 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marta Sánchez\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Azorín\", 32, \"Bajo B\", 53242, \"Maracena\", \"Granada\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Marc Casadó.\r\n   */\n  let estudiante3 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marc Casadó\", 21, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Náyades\", 107, \"\", 12952, \"Sant Pere de Vilamajor\", \"Barcelona\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Julian Carax.\r\n   */\n  let estudiante4 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Julian Carax\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Abad Moya\", 66, \"Tercero D\", 12805, \"Alcalá la Real\", \"Jaén\"));\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Matemática Discreta.\r\n   */\n  const matematicaDiscreta = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Matemática Discreta\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Lógica.\r\n   */\n  const logica = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Lógica\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Sistemas Digitales.\r\n   */\n  const sistemasDigitales = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Sistemas Digitales\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Ingeniería de Computadores.\r\n   */\n  const ingComputadores = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Ingeniería de Computadores\");\n  console.log(\"Estudiantes y asignaturas creados con éxito\");\n\n  //? Adición de estudiantes y asignaturas a sus respectivas listas con las funciones agregaEstudiante y agregaAsignatura\n\n  /**\r\n   * Agrega estudiantes y asignaturas a sus respectivas listas.\r\n   * Si ocurre un error durante el proceso, se captura y muestra en la consola.\r\n   */\n  try {\n    listaEstudiantes.agregaEstudiante(estudiante1);\n    listaEstudiantes.agregaEstudiante(estudiante2);\n    listaEstudiantes.agregaEstudiante(estudiante3);\n    listaAsignaturas.agregaAsignatura(logica);\n    listaAsignaturas.agregaAsignatura(sistemasDigitales);\n    listaAsignaturas.agregaAsignatura(matematicaDiscreta);\n    listaAsignaturas.agregaAsignatura(ingComputadores);\n  } catch (error) {\n    console.log(\"Ha habido un error al agregar al estudiante/asignatura a la lista\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes y asignaturas agregados con éxito\");\n\n  // Eliminación de estudiantes/asignaturas\n\n  /**\r\n   * Elimina al estudiante Julian Carax de la lista de estudiantes.\r\n   */\n  _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListadoEstudiantes.eliminaEstudiante(estudiante4);\n\n  /**\r\n   * Elimina la asignatura Ingeniería de Computadores de la lista de asignaturas.\r\n   */\n  _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__.ListadoAsignaturas.eliminaAsignatura(ingComputadores);\n  console.log(\"Estudiantes y asignaturas eliminados con éxito\");\n\n  //? Matriculación y desmatriculación de estudiantes en asignaturas con las funciones matricularEstudiante y desmatricularEstudiante\n\n  /**\r\n   * Matricula a los estudiantes en las asignaturas correspondientes.\r\n   * Si ocurre un error durante el proceso de matriculación, se captura y muestra en la consola.\r\n   */\n  try {\n    estudiante1.matricularEstudiante(logica, sistemasDigitales, ingComputadores);\n    estudiante2.matricularEstudiante(matematicaDiscreta, logica);\n    estudiante3.matricularEstudiante(logica, ingComputadores);\n    estudiante4.matricularEstudiante(sistemasDigitales);\n  } catch (error) {\n    console.log(\"Ha habido un error al matricular al estudiante\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes matriculados con éxito\");\n\n  /**\r\n   * Desmatricula al estudiante1 de la asignatura: lógica.\r\n   */\n  estudiante1.desmatricularEstudiante(logica);\n\n  /**\r\n   * Desmatricula al estudiante2 de la asignatura: matemática discreta.\r\n   */\n  estudiante2.desmatricularEstudiante(matematicaDiscreta);\n  console.log(\"Estudiantes desmatriculados con éxito\");\n\n  //? Calificación de estudiantes en asignaturas con la función calificarEstudiante\n\n  /**\r\n   * Califica a los estudiantes en las asignaturas correspondientes.\r\n   * Si ocurre un error durante el proceso de calificación, se captura y muestra en la consola.\r\n   */\n  try {\n    console.log(\"CALIFICACIÓN DE ESTUDIANTES\");\n\n    /**\r\n     * Califica al estudiante1 en Sistemas Digitales con nota 9.\r\n     */\n    estudiante1.calificarEstudiante(sistemasDigitales, 9);\n\n    /**\r\n     * Califica al estudiante1 en Sistemas Digitales con nota 7.\r\n     */\n    estudiante1.calificarEstudiante(sistemasDigitales, 7);\n\n    /**\r\n     * Califica al estudiante1 en Ingeniería de Computadores con nota 9.\r\n     */\n    estudiante1.calificarEstudiante(ingComputadores, 9);\n\n    /**\r\n     * Califica al estudiante2 en Matemática Discreta con nota 5.\r\n     */\n    estudiante2.calificarEstudiante(matematicaDiscreta, 5);\n    console.log(\"\\n\\n\");\n  } catch (error) {\n    console.log(\"Ha habido un error al calificar al estudiante\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes calificados con éxito\");\n}\n\n// ****************** Programa principal *****************************\n/**\r\n * Muestra el menú principal y maneja la interacción del usuario.\r\n * @function\r\n */\nfunction mostrarMenu() {\n  console.log(\"Bienvenido a Gestion de Estudiantes y Asignaturas, selecciona con que deseas interactuar:\");\n  console.log(\"1. Estudiante concreto\");\n  console.log(\"2. Asignaturas\");\n  console.log(\"3. Listado de estudiantes\");\n  console.log(\"4. Deseo salir\");\n  const eleccionMenu = prompt(\"Selecciona el número de la opción que deseas interactuar\");\n  switch (eleccionMenu) {\n    case \"1\":\n      console.clear();\n      console.log(\"Opciones a realizar con un estudiante:\");\n      console.log(\"1. Agregar estudiante\");\n      console.log(\"2. Eliminar estudiante\");\n      console.log(\"3. Matricular en una asignatura\");\n      console.log(\"4. Desmatricular de una asignatura\");\n      console.log(\"5. Mostrar historial matriculación-desmatriculación\");\n      console.log(\"6. Calificar estudiante\");\n      console.log(\"7. Mostrar promedio\");\n      console.log(\"8. Mostrar reporte completo\");\n      console.log(\"9. Salir\");\n      const eleccionEstudiante = prompt(\"Selecciona el número de la opción deseada:\");\n      switch (eleccionEstudiante) {\n        /*\r\n        * Agrega un estudiante a la lista de estudiantes.\r\n        */\n        case \"1\":\n          console.clear();\n          try {\n            // Obtención del nombre del estudiante\n            console.log(\"Introduce el nombre del estudiante que deseas agregar:\");\n            const nombreEstudiante = prompt(\"Nombre del estudiante:\");\n\n            // Obtención de la edad del estudiante\n            console.log(\"Introduce la edad del estudiante:\");\n            const edadEstudiante = Number(prompt(\"Edad del estudiante:\"));\n\n            // Obtención de la calle del estudiante\n            console.log(\"Introduce la calle del estudiante:\");\n            const calleEstudiante = prompt(\"Calle del estudiante:\");\n\n            // Obtención del número de vivieda del estudiante\n            console.log(\"Introduce el número de vivienda:\");\n            const numeroEstudiante = Number(prompt(\"Número de vivienda del estudiante:\"));\n\n            // Obtención del número de piso del estudiante\n            console.log(\"Introduce el piso o pulsa ENTER si no vive en un piso:\");\n            const pisoEstudiante = prompt(\"Piso del estudiante:\");\n\n            // Obtención del código postal del estudiante\n            console.log(\"Introduce el código postal de la localidad:\");\n            const cpEstudiante = Number(prompt(\"Código postal del estudiante:\"));\n\n            // Obtención de la provincia del estudiante\n            console.log(\"Introduce la provincia:\");\n            const provinciaEstudiante = prompt(\"Provincia del estudiante:\");\n\n            // Obtención de la localidad del estudiante\n            console.log(\"Introduce la localidad:\");\n            const localidadEstudiante = prompt(\"Localidad del estudiante:\");\n\n            // Creación de la dirección completa del estudiante\n            const direccionEstudiante = new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(calleEstudiante, numeroEstudiante, pisoEstudiante, cpEstudiante, provinciaEstudiante, localidadEstudiante);\n\n            // Creación del estudiante con los datos obtenidos\n            const nuevoEstudiante = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(nombreEstudiante, edadEstudiante, direccionEstudiante);\n\n            // Agregado del estudiante a la lista de estudiantes\n            listaEstudiantes.agregaEstudiante(nuevoEstudiante);\n\n            // Mensaje de confirmación \n            console.log(\"Estudiante agregado con éxito\");\n          } catch (error) {\n            console.log(\"Ha habido un error al agregar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Elimina un estudiante de la lista de estudiantes.\r\n        */\n        case \"2\":\n          console.clear();\n\n          // Obtención del nombre del estudiante a eliminar\n          console.log(\"Introduce el nombre del estudiante que quieras eliminar\");\n          let estudianteEliminar = prompt(\"Nombre del estudiante a eliminar:\");\n          // Asignación de un objeto estudiante a la variable\n          estudianteEliminar = listaEstudiantes.busquedaEstudiante(estudianteEliminar);\n          // Eliminación del estudiante\n          listaEstudiantes.eliminaEstudiante(estudianteEliminar);\n          break;\n\n        /*\r\n        * Matricula un estudiante en una asignatura.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas matricular:\");\n          // Obtención del estudiante a matricular\n          let estudianteMatricular = prompt(\"Nombre del estudiante:\");\n          try {\n            estudianteMatricular = listaEstudiantes.busquedaEstudiante(estudianteMatricular);\n            console.log(\"Introduce el nombre de la asignatura eb la que deseas matricular al estudiante:\");\n\n            // Obtención de la asignatura a matricular\n            let asignaturaMatricular = prompt(\"Nombre de la asignatura:\");\n            asignaturaMatricular = listaAsignaturas.busquedaAsignatura(asignaturaMatricular);\n\n            // Matriculación del estudiante en la asignatura\n            estudianteMatricular.matricularEstudiante(asignaturaMatricular);\n          } catch (error) {\n            console.log(`No se ha podido matricular a ${estudianteMatricular.nombre} en ${asignaturaMatricular.nombre}`);\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Desmatricula un estudiante de una asignatura.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas desmatricular:\");\n          // Obtención del estudiante a desmatricular\n          let estudianteDesmatricular = prompt(\"Nombre del estudiante:\");\n          try {\n            // Búsqueda del estudiante\n            estudianteDesmatricular = listaEstudiantes.busquedaEstudiante(estudianteDesmatricular);\n            console.log(\"Introduce el nombre de la asignatura de la que deseas desmatricular al estudiante:\");\n\n            // Obtención de la asignatura a desmatricular\n            let asignaturaDesmatricular = prompt(\"Nombre de la asignatura:\");\n            asignaturaDesmatricular = listaAsignaturas.busquedaAsignatura(asignaturaDesmatricular);\n\n            // Desmatriculación de la asignatura\n            estudianteDesmatricular.desmatricularEstudiante(asignaturaDesmatricular);\n          } catch (error) {\n            console.log(`No se ha podido desmatricular a ${estudianteDesmatricular.nombre} de ${asignaturaDesmatricular.nombre}`);\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Muestra el historial de matriculaciones y desmatriculaciones de un estudiante.\r\n        */\n        case \"5\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante del que deseas ver el historial:\");\n          // Obtención del estudiante del que se quiere ver el historial\n          let estudianteHistorial = prompt(\"Nombre del estudiante:\");\n          // Búsqueda del estudiante\n          estudianteHistorial = listaEstudiantes.busquedaEstudiante(estudianteHistorial);\n          // Muestra del historial\n          console.log(estudianteHistorial.relacion);\n          break;\n\n        /*\r\n        * Califica a un estudiante en una asignatura.\r\n        */\n        case \"6\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre del estudiante al que deseas calificar:\");\n            // Obtención del estudiante al que se quiere calificar\n            let estudianteCalificar = prompt(\"Nombre del estudiante:\");\n            estudianteCalificar = listaEstudiantes.busquedaEstudiante(estudianteCalificar);\n            console.log(\"Introduce el nombre de la asignatura en la que deseas calificar al estudiante:\");\n            // Obtención de la asignatura en la que se quiere calificar al estudiante\n            let asignaturaCalificar = prompt(\"Nombre de la asignatura:\");\n            asignaturaCalificar = listaAsignaturas.busquedaAsignatura(asignaturaCalificar);\n            console.log(\"Introduce la calificación que deseas asignar al estudiante:\");\n            // Obtención de la calificación a asignar\n            let calificacion = prompt(\"Calificación:\");\n            // Calificación del estudiante\n            estudianteCalificar.calificar(asignaturaCalificar, calificacion);\n          } catch (error) {\n            console.log(\"Ha habido un error al calificar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Muestra el promedio de un estudiante.\r\n        */\n        case \"7\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante del que deseas ver el promedio:\");\n          // Obtención del estudiante del que se quiere ver el promedio\n          let estudiantePromedio = prompt(\"Nombre del estudiante:\");\n          estudiantePromedio = listaEstudiantes.busquedaEstudiante(estudiantePromedio);\n          // Muestra del promedio\n          console.log(estudiantePromedio.promedioEstudiante());\n          break;\n\n        /*\r\n        * Muestra el reporte completo de los estudiantes.\r\n        */\n        case \"8\":\n          console.clear();\n          console.log(\"Reporte completo de los estudiantes:\");\n          console.log(listaEstudiantes.reporte());\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"9\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 9 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"2\":\n      console.clear();\n      console.log(\"Opciones a realizar con una asignatura:\");\n      console.log(\"1. Agregar asignatura\");\n      console.log(\"2. Eliminar asignatura\");\n      console.log(\"3. Calcular promedio de las calificaciones de una asignatura\");\n      console.log(\"4. Buscar asignatura\");\n      console.log(\"5. Calificar asignatura\");\n      console.log(\"6. Salir\");\n      const eleccionAsignatura = prompt(\"Selecciona el número de la opción deseada:\");\n      switch (eleccionAsignatura) {\n        /*\r\n        * Agrega una asignatura a la lista de asignaturas.\r\n        */\n        case \"1\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre de la asignatura que deseas agregar\");\n            // Obtención del nombre de la asignatura a agregar\n            const nombreAsignatura = prompt(\"Nombre de la asignatura:\");\n            // Creación de la asignatura\n            const nuevaAsignatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(nombreAsignatura);\n            // Agregado de la asignatura a la lista de asignaturas\n            listaAsignaturas.agregaAsignatura(nuevaAsignatura);\n            console.log(\"Asignatura agregada con éxito\");\n          } catch (error) {\n            console.log(\"Ha habido un error al agregar la asignatura\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Elimina una asignatura de la lista de asignaturas.\r\n        */\n        case \"2\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura que deseas eliminar\");\n          // Obtención del nombre de la asignatura a eliminar\n          const nombreAsignaturaEliminar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura a eliminar\n          const asignaturaAEliminar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaEliminar);\n          // Eliminación de la asignatura\n          listaAsignaturas.eliminaAsignatura(asignaturaAEliminar);\n          break;\n\n        /*\r\n        * Calcula el promedio de las calificaciones de una asignatura.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura de la que deseas calcular el promedio\");\n          // Obtención del nombre de la asignatura de la que se quiere calcular el promedio\n          const nombreAsignaturaPromedio = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          const asignaturaPromedio = listaAsignaturas.busquedaAsignatura(nombreAsignaturaPromedio);\n          // Muestra del promedio\n          console.log(asignaturaPromedio.calculaPromedio());\n          break;\n\n        /*\r\n        * Busca una asignatura en la lista de asignaturas.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura que deseas buscar\");\n          // Obtención del nombre de la asignatura a buscar\n          const nombreAsignaturaBuscar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          const asignaturaABuscar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaBuscar);\n          // Muestra de la asignatura\n          console.log(asignaturaABuscar.toString());\n          break;\n\n        /*\r\n        * Califica a los estudiantes de una asignatura.\r\n        */\n        case \"5\":\n          console.clear();\n\n          // Obtenemos el nombre de la asignatura a calificar\n          console.log(\"Introduce el nombre de la asignatura que deseas calificar\");\n          const nombreAsignaturaCalificar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          const asignaturaCalificar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaCalificar);\n          // Obtenemos la calificación a asignar\n          console.log(\"Introduce la calificación que deseas asignar a la asignatura\");\n          const calificacionAsignatura = prompt(\"Calificación:\");\n          // Calificación de la asignatura\n          asignaturaCalificar.calificar(calificacionAsignatura);\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"6\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 5 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"3\":\n      console.clear();\n      console.log(\"Opciones a realizar con la lista de estudiantes:\");\n      console.log(\"1. Calcular promedio general de los estudiantes\");\n      console.log(\"2. Eliminar estudiantes de la lista\");\n      console.log(\"3. Buscar a un estudiante\");\n      console.log(\"4. Salir\");\n      const eleccionListaEstudiantes = prompt(\"Selecciona el número de la opción deseada:\");\n\n      //? Opciones sobre la lista de estudiantes\n      switch (eleccionListaEstudiantes) {\n        /*\r\n        * Calcula el promedio general de los estudiantes.\r\n        */\n        case \"1\":\n          console.clear();\n\n          // Muestra del promedio general de los estudiantes\n          console.log(\"El promedio general de los estudiantes es: \" + listaEstudiantes.promedioEstudiantes());\n          break;\n\n        /*\r\n        * Elimina un estudiante de la lista de estudiantes.\r\n        */\n        case \"2\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre del estudiante que deseas eliminar de la lista\");\n            // Obtención del nombre del estudiante a eliminar\n            const nombreEstudiante = prompt(\"Nombre del estudiante:\");\n            // Búsqueda del estudiante\n            const estudianteAEliminar = listaEstudiantes.busquedaEstudiante(nombreEstudiante);\n            // Eliminación del estudiante\n            listaEstudiantes.eliminaEstudiante(estudianteAEliminar);\n          } catch (error) {\n            console.log(\"Ha habido un error al eliminar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Busca un estudiante en la lista de estudiantes.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas buscar\");\n          // Obtención del nombre del estudiante a buscar\n          const nombreEstudianteBuscar = prompt(\"Nombre del estudiante:\");\n          // Búsqueda del estudiante\n          const estudianteABuscar = listaEstudiantes.busquedaEstudiante(nombreEstudianteBuscar);\n          // Muestra del estudiante\n          console.log(estudianteABuscar.toString());\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"4\":\n      console.clear();\n      console.log(\"Saliendo del programa...\");\n      break;\n    default:\n      console.clear();\n      console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\n      mostrarMenu();\n  }\n}\n\n// Llamada al metodo de prueba de inicialización de datos\nprueba();\n\n// Llamada al método principal\nmostrarMenu();\n\n//# sourceURL=webpack://main/./js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/main.js");
/******/ 	
/******/ })()
;