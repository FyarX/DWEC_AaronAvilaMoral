/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/Asignatura.js":
/*!**************************!*\
  !*** ./js/Asignatura.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Asignatura: () => (/* binding */ Asignatura)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _nombre = /*#__PURE__*/new WeakMap();\nvar _calificaciones = /*#__PURE__*/new WeakMap();\n/**\r\n * Representa una asignatura.\r\n * @class\r\n */\nvar Asignatura = /*#__PURE__*/function () {\n  /**\r\n   * Crea una nueva instancia de Asignatura.\r\n   * @constructor\r\n   * @param {string} nombre - El nombre de la asignatura. Solo se permiten letras y espacios.\r\n   */\n  function Asignatura(nombre) {\n    _classCallCheck(this, Asignatura);\n    _classPrivateFieldInitSpec(this, _nombre, void 0);\n    _classPrivateFieldInitSpec(this, _calificaciones, void 0);\n    // Filtrado de nombres\n    _classPrivateFieldSet(_nombre, this, nombre.match(/^[A-Za-zÁÉÍÓÚáéíóú ]+$/) ? nombre : \"Sin nombre\"); // Solo acepta letras y espacios\n\n    _classPrivateFieldSet(_calificaciones, this, []);\n  }\n\n  /**\r\n   * Calcula el promedio de las calificaciones si existen.\r\n   * @returns {number} El promedio de las calificaciones o 0 si no hay calificaciones.\r\n   */\n  return _createClass(Asignatura, [{\n    key: \"calculaPromedio\",\n    value: function calculaPromedio() {\n      // Comprueba si hay calificaciones\n      var longArray = _classPrivateFieldGet(_calificaciones, this).length;\n      if (longArray > 0) {\n        var sumArray = 0;\n        for (var i = 0; i < longArray; i++) {\n          sumArray += _classPrivateFieldGet(_calificaciones, this)[i];\n        }\n\n        // Devuelve la media de las calificaciones\n        return sumArray / longArray;\n      } else {\n        console.log(\"No existen calificaciones\");\n        return 0;\n      }\n    }\n\n    /**\r\n     * Agrega una calificación a la asignatura.\r\n     * @param {number} nota - La calificación a agregar (debe estar entre 0 y 10).\r\n     * @throws {Error} Si la calificación no está en el rango permitido.\r\n     */\n  }, {\n    key: \"calificar\",\n    value: function calificar(nota) {\n      if (0 <= nota && nota <= 10) {\n        // Agrega la calificación al array\n        _classPrivateFieldGet(_calificaciones, this).push(nota);\n      } else {\n        throw new Error(\"La calificación debe estar entre 0 y 10.\");\n      }\n    }\n\n    /**\r\n     * Elimina una calificación de la asignatura.\r\n     * @param {number} nota - La calificación a eliminar.\r\n     * @throws {Error} Si la calificación no existe en la lista.\r\n     */\n  }, {\n    key: \"eliminarCalificacion\",\n    value: function eliminarCalificacion(nota) {\n      if (_classPrivateFieldGet(_calificaciones, this).includes(nota)) {\n        // Separa del array las entradas con la calificación que se indique\n        _classPrivateFieldGet(_calificaciones, this).splice(_classPrivateFieldGet(_calificaciones, this).indexOf(nota), 1);\n      } else {\n        throw new Error(\"La nota no puede ser eliminada ya que no existe\");\n      }\n    }\n\n    // <<<<<<<<<<<<<<<<< Getters de la clase <<<<<<<<<<<<<<<<<<<<<\n\n    /**\r\n     * Obtiene el nombre de la asignatura.\r\n     * @type {string}\r\n     * @readonly\r\n     */\n  }, {\n    key: \"nombre\",\n    get: function get() {\n      return _classPrivateFieldGet(_nombre, this);\n    }\n\n    /**\r\n     * Obtiene las calificaciones de la asignatura.\r\n     * @type {number[]}\r\n     * @readonly\r\n     */\n  }, {\n    key: \"calificaciones\",\n    get: function get() {\n      return _classPrivateFieldGet(_calificaciones, this);\n    }\n\n    /**\r\n     * Convierte la información de la asignatura en una cadena de texto.\r\n     * @returns {string} Una representación en texto de la asignatura.\r\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Asignatura: \".concat(this.nombre);\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://main/./js/Asignatura.js?");

/***/ }),

/***/ "./js/Direccion.js":
/*!*************************!*\
  !*** ./js/Direccion.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direccion: () => (/* binding */ Direccion)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _calle = /*#__PURE__*/new WeakMap();\nvar _numero = /*#__PURE__*/new WeakMap();\nvar _piso = /*#__PURE__*/new WeakMap();\nvar _cp = /*#__PURE__*/new WeakMap();\nvar _localidad = /*#__PURE__*/new WeakMap();\nvar _provincia = /*#__PURE__*/new WeakMap();\n/**\r\n * Representa una dirección.\r\n * @class\r\n */\nvar Direccion = /*#__PURE__*/function () {\n  /**\r\n   * @param {string} calle - Nombre de la calle.\r\n   * @param {string} provincia - Nombre de la provincia.\r\n   * @param {number} numero - Número de la vivienda.\r\n   * @param {string} piso - Número de piso.\r\n   * @param {number} cp - Código postal.\r\n   * @param {string} localidad - Nombre de la localidad.\r\n   * \r\n   */\n\n  function Direccion(calle, numero, piso, cp, localidad, provincia) {\n    _classCallCheck(this, Direccion);\n    _classPrivateFieldInitSpec(this, _calle, void 0);\n    _classPrivateFieldInitSpec(this, _numero, void 0);\n    _classPrivateFieldInitSpec(this, _piso, void 0);\n    _classPrivateFieldInitSpec(this, _cp, void 0);\n    _classPrivateFieldInitSpec(this, _localidad, void 0);\n    _classPrivateFieldInitSpec(this, _provincia, void 0);\n    _classPrivateFieldSet(_calle, this, calle);\n    _classPrivateFieldSet(_numero, this, numero);\n    _classPrivateFieldSet(_piso, this, piso);\n    _classPrivateFieldSet(_cp, this, cp);\n    _classPrivateFieldSet(_provincia, this, provincia);\n    _classPrivateFieldSet(_localidad, this, localidad);\n  }\n\n  /**\r\n   * Obtiene la calle.\r\n   * @returns {string} La calle.\r\n   */\n  return _createClass(Direccion, [{\n    key: \"calle\",\n    get: function get() {\n      return _classPrivateFieldGet(_calle, this);\n    }\n\n    /**\r\n     * Obtiene el número.\r\n     * @returns {number} \r\n     */\n  }, {\n    key: \"numero\",\n    get: function get() {\n      return _classPrivateFieldGet(_numero, this);\n    }\n\n    /**\r\n     * Obtiene el piso.\r\n     * @returns {string} \r\n     */\n  }, {\n    key: \"piso\",\n    get: function get() {\n      return _classPrivateFieldGet(_piso, this);\n    }\n\n    /**\r\n     * Obtiene el código postal.\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"cp\",\n    get: function get() {\n      return _classPrivateFieldGet(_cp, this);\n    }\n\n    /**\r\n     * Obtiene la provincia.\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"provincia\",\n    get: function get() {\n      return _classPrivateFieldGet(_provincia, this);\n    }\n\n    /**\r\n     * Obtiene la localidad.\r\n     * @returns {string}\r\n     */\n  }, {\n    key: \"localidad\",\n    get: function get() {\n      return _classPrivateFieldGet(_localidad, this);\n    }\n\n    /**\r\n     * Representa la dirección como una cadena.\r\n     * @returns {string} Una cadena con la dirección completa.\r\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Calle: \".concat(_classPrivateFieldGet(_calle, this), \", N\\xFAmero: \").concat(_classPrivateFieldGet(_numero, this), \", Piso: \").concat(_classPrivateFieldGet(_piso, this), \", C\\xF3digo Postal: \").concat(_classPrivateFieldGet(_cp, this), \", Localidad: \").concat(_classPrivateFieldGet(_localidad, this), \"(\").concat(_classPrivateFieldGet(_provincia, this), \")\");\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://main/./js/Direccion.js?");

/***/ }),

/***/ "./js/Estudiante.js":
/*!**************************!*\
  !*** ./js/Estudiante.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Estudiante: () => (/* binding */ Estudiante)\n/* harmony export */ });\n/* harmony import */ var _Persona_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Persona.js */ \"./js/Persona.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\n\n\n/**\r\n * Representa un estudiante que hereda de Persona.\r\n * @extends Persona\r\n * @class\r\n */\nvar _id = /*#__PURE__*/new WeakMap();\nvar _asignaturas = /*#__PURE__*/new WeakMap();\nvar _relacion = /*#__PURE__*/new WeakMap();\nvar Estudiante = /*#__PURE__*/function (_Persona) {\n  /**\r\n   * Crea una nueva instancia de Estudiante.\r\n   * @constructor\r\n   * @param {string} nombre - Nombre del estudiante.\r\n   * @param {number} edad - Edad del estudiante.\r\n   * @param {Direccion} direccion - Dirección del estudiante.\r\n   */\n  function Estudiante(nombre, edad, direccion) {\n    var _this;\n    _classCallCheck(this, Estudiante);\n    _this = _callSuper(this, Estudiante, [nombre, edad, direccion]);\n    _classPrivateFieldInitSpec(_this, _id, void 0);\n    _classPrivateFieldInitSpec(_this, _asignaturas, void 0);\n    _classPrivateFieldInitSpec(_this, _relacion, void 0);\n    _classPrivateFieldSet(_id, _this, Estudiante.contadorId++);\n    _classPrivateFieldSet(_asignaturas, _this, []);\n    _classPrivateFieldSet(_relacion, _this, []);\n    return _this;\n  }\n\n  /**\r\n   * Matricula al estudiante en una o más asignaturas.\r\n   * @param {...Asignatura} asignaturas - Las asignaturas en las que se matricula al estudiante.\r\n   */\n  _inherits(Estudiante, _Persona);\n  return _createClass(Estudiante, [{\n    key: \"matricularEstudiante\",\n    value: function matricularEstudiante() {\n      for (var _len = arguments.length, asignaturas = new Array(_len), _key = 0; _key < _len; _key++) {\n        asignaturas[_key] = arguments[_key];\n      }\n      for (var _i = 0, _asignaturas2 = asignaturas; _i < _asignaturas2.length; _i++) {\n        var asignatura = _asignaturas2[_i];\n        _classPrivateFieldGet(_asignaturas, this).push(asignatura);\n        _classPrivateFieldGet(_relacion, this).push([\"Matriculaci\\xF3n de \".concat(asignatura.nombre), new Date()]);\n      }\n    }\n\n    /**\r\n     * Desmatricula al estudiante de una o más asignaturas.\r\n     * @param {...Asignatura} asignaturas - Las asignaturas de las que se desmatricula al estudiante.\r\n     */\n  }, {\n    key: \"desmatricularEstudiante\",\n    value: function desmatricularEstudiante() {\n      var _this2 = this;\n      for (var _len2 = arguments.length, asignaturas = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        asignaturas[_key2] = arguments[_key2];\n      }\n      var _loop = function _loop() {\n        var asignatura = _asignaturas3[_i2];\n        _classPrivateFieldSet(_asignaturas, _this2, _classPrivateFieldGet(_asignaturas, _this2).filter(function (a) {\n          return a.nombre !== asignatura.nombre;\n        }));\n        _classPrivateFieldGet(_relacion, _this2).push([\"Desmatriculaci\\xF3n de \".concat(asignatura.nombre), new Date()]);\n      };\n      for (var _i2 = 0, _asignaturas3 = asignaturas; _i2 < _asignaturas3.length; _i2++) {\n        _loop();\n      }\n    }\n\n    /**\r\n     * Califica al estudiante en una asignatura.\r\n     * @param {Asignatura} asignatura - La asignatura que se calificará.\r\n     * @param {number} nota - La nota que se asignará.\r\n     * @throws {Error} Si no hay nota o no es válida, o si el estudiante no está matriculado.\r\n     */\n  }, {\n    key: \"calificar\",\n    value: function calificar(asignatura, nota) {\n      if (arguments.length === 1) {\n        throw new Error(\"Faltan datos para calificar al estudiante\");\n      }\n      var asignaturaMatriculada = _classPrivateFieldGet(_asignaturas, this).find(function (a) {\n        return a.nombre === asignatura.nombre;\n      });\n      if (!asignaturaMatriculada) {\n        throw new Error(\"El estudiante no está matriculado en esta asignatura\");\n      }\n      if (nota < 0 || nota > 10) {\n        throw new Error(\"La calificación debe estar entre 0 y 10.\");\n      }\n      asignaturaMatriculada.calificar(nota);\n    }\n\n    /**\r\n     * Devuelve el historial de acciones del estudiante.\r\n     * @returns {string[]} El historial de matriculaciones y desmatriculaciones.\r\n     */\n  }, {\n    key: \"relacion\",\n    get: function get() {\n      return _classPrivateFieldGet(_relacion, this).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          accion = _ref2[0],\n          fecha = _ref2[1];\n        var fechaFormateada = fecha.toLocaleDateString('es-ES', {\n          weekday: 'long',\n          day: '2-digit',\n          month: 'long',\n          year: 'numeric'\n        });\n        return \"\".concat(accion, \" - \").concat(fechaFormateada);\n      });\n    }\n\n    /**\r\n     * Calcula el promedio de calificaciones del estudiante.\r\n     * @returns {string} El promedio calculado.\r\n     */\n  }, {\n    key: \"promedioEstudiante\",\n    value: function promedioEstudiante() {\n      var sumatorio = 0;\n      var contador = 0;\n      var _iterator = _createForOfIteratorHelper(_classPrivateFieldGet(_asignaturas, this)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var asignatura = _step.value;\n          var promedioAsignatura = asignatura.calculaPromedio();\n          if (promedioAsignatura !== 0) {\n            sumatorio += promedioAsignatura;\n            contador++;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return contador === 0 ? 0 : \"El promedio del estudiante es \".concat((sumatorio / contador).toFixed(2));\n    }\n\n    /**\r\n     * Obtiene las asignaturas del estudiante.\r\n     * @returns {Asignatura[]} Las asignaturas del estudiante.\r\n     */\n  }, {\n    key: \"asignaturas\",\n    get: function get() {\n      return _classPrivateFieldGet(_asignaturas, this);\n    }\n\n    /**\r\n     * Representa al estudiante como una cadena.\r\n     * @returns {string} Una cadena con los datos del estudiante.\r\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Estudiante: \".concat(this.nombre, \", ID: \").concat(_classPrivateFieldGet(_id, this), \", Direcci\\xF3n: \").concat(this.direccion);\n    }\n  }]);\n}(_Persona_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n_defineProperty(Estudiante, \"contadorId\", 1);\n\n//# sourceURL=webpack://main/./js/Estudiante.js?");

/***/ }),

/***/ "./js/ListadoAsignaturas.js":
/*!**********************************!*\
  !*** ./js/ListadoAsignaturas.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoAsignaturas: () => (/* binding */ ListadoAsignaturas)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _listaAsignaturas = /*#__PURE__*/new WeakMap();\n/**\r\n * Representa un listado de asignaturas.\r\n * @class\r\n */\nvar ListadoAsignaturas = /*#__PURE__*/function () {\n  /**\r\n   * Crea una nueva instancia de ListadoAsignaturas.\r\n   * @constructor\r\n   * @param {...Asignatura} asignaturas - Las asignaturas a agregar inicialmente.\r\n   */\n  function ListadoAsignaturas() {\n    _classCallCheck(this, ListadoAsignaturas);\n    _classPrivateFieldInitSpec(this, _listaAsignaturas, void 0);\n    _classPrivateFieldSet(_listaAsignaturas, this, []);\n    for (var _len = arguments.length, asignaturas = new Array(_len), _key = 0; _key < _len; _key++) {\n      asignaturas[_key] = arguments[_key];\n    }\n    for (var _i = 0, _asignaturas = asignaturas; _i < _asignaturas.length; _i++) {\n      var asignatura = _asignaturas[_i];\n      // Agrega las asignaturas que se pasan como parámetro\n      this.añadeAsignatura(asignatura);\n    }\n  }\n\n  /**\r\n   * Agrega una asignatura al listado.\r\n   * @param {Asignatura} asignatura - La asignatura a agregar.\r\n   */\n  return _createClass(ListadoAsignaturas, [{\n    key: \"agregaAsignatura\",\n    value: function agregaAsignatura(asignatura) {\n      _classPrivateFieldGet(_listaAsignaturas, this).push(asignatura);\n    }\n\n    /**\r\n     * Elimina una asignatura del listado.\r\n     * @param {Asignatura} asignatura - La asignatura a eliminar.\r\n     * @throws {Error} Si la asignatura no se encuentra en el listado.\r\n     */\n  }, {\n    key: \"eliminaAsignatura\",\n    value: function eliminaAsignatura(asignatura) {\n      // Comprueba si la asignatura está en la lista\n      if (_classPrivateFieldGet(_listaAsignaturas, this).includes(asignatura)) {\n        // Filtra todas las asignaturas menos la que queremos eliminar\n        _classPrivateFieldGet(_listaAsignaturas, this).filter(function (a) {\n          return a !== asignatura;\n        });\n        console.log(\"Asignatura eliminada con éxito\");\n      } else {\n        throw new Error(\"La asignatura no se encuentra en el listado\");\n      }\n    }\n\n    /**\r\n     * Busca asignaturas que coincidan parcialmente con un patrón.\r\n     * @param {string} patron - El patrón a buscar.\r\n     * @returns {Asignatura[]} Las asignaturas que coinciden con el patrón.\r\n     * @throws {Error} Si el patrón no es una cadena de texto.\r\n     */\n  }, {\n    key: \"busquedaAsignatura\",\n    value: function busquedaAsignatura(patron) {\n      // Comprueba si el patrón es una cadena de texto\n      if (typeof patron !== \"string\") throw new Error(\"El patrón debe ser una cadena de texto\");\n      var patronAsignatura = new RegExp(patron, \"i\");\n      // Filtra las asignaturas que cumplen el patrón\n      return _classPrivateFieldGet(_listaAsignaturas, this).filter(function (asignatura) {\n        return patronAsignatura.test(asignatura.nombre);\n      });\n    }\n\n    /**\r\n     * Obtiene la lista completa de asignaturas.\r\n     * @returns {Asignatura[]} El listado de asignaturas.\r\n     */\n  }, {\n    key: \"listaAsignaturas\",\n    get: function get() {\n      return _classPrivateFieldGet(_listaAsignaturas, this);\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://main/./js/ListadoAsignaturas.js?");

/***/ }),

/***/ "./js/ListadoEstudiantes.js":
/*!**********************************!*\
  !*** ./js/ListadoEstudiantes.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoEstudiantes: () => (/* binding */ ListadoEstudiantes)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _listaEstudiantes = /*#__PURE__*/new WeakMap();\n/**\r\n * Representa un listado de estudiantes.\r\n * @class\r\n */\nvar ListadoEstudiantes = /*#__PURE__*/function () {\n  /**\r\n   * Crea una nueva instancia de ListadoEstudiantes.\r\n   * @constructor\r\n   * @param {...Estudiante} estudiantes - Los estudiantes a agregar inicialmente.\r\n   */\n  function ListadoEstudiantes() {\n    _classCallCheck(this, ListadoEstudiantes);\n    _classPrivateFieldInitSpec(this, _listaEstudiantes, void 0);\n    _classPrivateFieldSet(_listaEstudiantes, this, []);\n\n    // Agrega cada estudiante que se pase como parámetro al array creado previamente\n    for (var _len = arguments.length, estudiantes = new Array(_len), _key = 0; _key < _len; _key++) {\n      estudiantes[_key] = arguments[_key];\n    }\n    for (var _i = 0, _estudiantes = estudiantes; _i < _estudiantes.length; _i++) {\n      var estudiante = _estudiantes[_i];\n      this.agregaEstudiante(estudiante);\n    }\n  }\n\n  /**\r\n   * Agrega un estudiante al listado.\r\n   * @param {Estudiante} estudiante - El estudiante a agregar.\r\n   * @throws {Error} Si el estudiante ya está en la lista.\r\n   */\n  return _createClass(ListadoEstudiantes, [{\n    key: \"agregaEstudiante\",\n    value: function agregaEstudiante(estudiante) {\n      // Comprueba si el estudiante ya está en la lista\n      if (_classPrivateFieldGet(_listaEstudiantes, this).includes(estudiante)) {\n        throw new Error(\"El estudiante ya se encuentra en la lista, no puede haber duplicados\");\n      } else {\n        _classPrivateFieldGet(_listaEstudiantes, this).push(estudiante);\n      }\n    }\n\n    /**\r\n     * Elimina un estudiante del listado.\r\n     * @param {Estudiante} estudiante - El estudiante a eliminar.\r\n     * @throws {Error} Si el estudiante no se encuentra en la lista.\r\n     */\n  }, {\n    key: \"eliminaEstudiante\",\n    value: function eliminaEstudiante(estudiante) {\n      if (_classPrivateFieldGet(_listaEstudiantes, this).includes(estudiante)) {\n        // Filtra a todos los estudiantes menos el que queremos eliminar\n        _classPrivateFieldSet(_listaEstudiantes, this, _classPrivateFieldGet(_listaEstudiantes, this).filter(function (e) {\n          return e !== estudiante;\n        }));\n        console.log(\"Estudiante eliminado con éxito\");\n      } else {\n        throw new Error(\"El estudiante no se encuentra en el listado\");\n      }\n    }\n\n    /**\r\n     * Calcula el promedio general de todos los estudiantes.\r\n     * @returns {number|string} El promedio general o un mensaje si no hay estudiantes.\r\n     */\n  }, {\n    key: \"promedioEstudiantes\",\n    value: function promedioEstudiantes() {\n      // Comprueba si hay estudiantes en la lista\n      if (_classPrivateFieldGet(_listaEstudiantes, this).length === 0) return \"No existe ningún estudiante en la lista\";\n      var sum = 0;\n      var contador = 0;\n      var _iterator = _createForOfIteratorHelper(_classPrivateFieldGet(_listaEstudiantes, this)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var estudiante = _step.value;\n          // Se obtiene la media de cada estudiante por separado\n          var promEstudiante = estudiante.promedioEstudiante();\n\n          // Si la media es un número, se suma al sumatorio y se incrementa el contador\n          if (typeof promEstudiante === \"number\") {\n            sum += promEstudiante;\n            contador++;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var promedioTotal = (sum / contador).toFixed(2);\n      return Number(promedioTotal);\n    }\n\n    /**\r\n     * Muestra un reporte con el nombre, calificaciones y promedio de cada estudiante.\r\n     */\n  }, {\n    key: \"reporte\",\n    value: function reporte() {\n      // Recorre la lista de estudiantes y muestra su nombre, calificaciones y promedio\n      _classPrivateFieldGet(_listaEstudiantes, this).forEach(function (estudiante) {\n        console.log();\n        console.log(\"Nombre del estudiante: \".concat(estudiante.nombre));\n        console.log(\"Calificaciones:\");\n        // Muestra las calificaciones de cada asignatura\n        estudiante.asignaturas.forEach(function (asignatura) {\n          var nota = Number(asignatura[1]);\n          console.log(\"\".concat(asignatura.nombre, \": \").concat(nota));\n        });\n        console.log(\"Promedio: \".concat(estudiante.promedioEstudiante()));\n        console.log(\"--------------------------------\");\n      });\n    }\n\n    /**\r\n     * Busca estudiantes que coincidan parcialmente con un patrón.\r\n     * @param {string} patron - El patrón a buscar.\r\n     * @returns {Estudiante[]} Los estudiantes que coinciden con el patrón.\r\n     * @throws {Error} Si el patrón no es una cadena de texto.\r\n     */\n  }, {\n    key: \"busquedaEstudiante\",\n    value: function busquedaEstudiante(patron) {\n      // Comprueba si el patrón es una cadena de texto\n      if (typeof patron !== \"string\") {\n        throw new Error(\"El patrón debe ser una cadena de texto\");\n      }\n\n      // Crea un patrón de búsqueda\n      var patronEstudiante = new RegExp(patron, \"i\");\n      // Devuelve todos los estudiantes que coinciden con el patrón\n      return _classPrivateFieldGet(_listaEstudiantes, this).filter(function (estudiante) {\n        return patronEstudiante.test(estudiante.nombre);\n      });\n    }\n\n    /**\r\n     * Obtiene una copia de la lista de estudiantes.\r\n     * @returns {Estudiante[]} Una copia del listado de estudiantes.\r\n     */\n  }, {\n    key: \"getListadoEstudiantes\",\n    value: function getListadoEstudiantes() {\n      // Devuelve una copia de la lista de estudiantes\n      return _toConsumableArray(_classPrivateFieldGet(_listaEstudiantes, this));\n    }\n  }]);\n}();\n\n//# sourceURL=webpack://main/./js/ListadoEstudiantes.js?");

/***/ }),

/***/ "./js/Persona.js":
/*!***********************!*\
  !*** ./js/Persona.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Persona)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nvar _nombre = /*#__PURE__*/new WeakMap();\nvar _edad = /*#__PURE__*/new WeakMap();\nvar _direccion = /*#__PURE__*/new WeakMap();\n/**\r\n * Representa una persona genérica.\r\n * @class\r\n */\nvar Persona = /*#__PURE__*/function () {\n  /**\r\n   * Crea una nueva instancia de Persona.\r\n   * @constructor\r\n   * @param {string} nombre - Nombre de la persona.\r\n   * @param {number} edad - Edad de la persona.\r\n   * @param {Direccion} direccion - Dirección de la persona.\r\n   * @throws {Error} Si el nombre contiene caracteres no válidos.\r\n   */\n  function Persona(nombre, edad, direccion) {\n    _classCallCheck(this, Persona);\n    _classPrivateFieldInitSpec(this, _nombre, void 0);\n    _classPrivateFieldInitSpec(this, _edad, void 0);\n    _classPrivateFieldInitSpec(this, _direccion, void 0);\n    if (!nombre.match(/[A-Za-zÁÉÍÓÚáéíóú ]+/)) {\n      throw new Error(\"El nombre debe contener solo letras y espacios\");\n    } else {\n      _classPrivateFieldSet(_nombre, this, nombre);\n    }\n    _classPrivateFieldSet(_edad, this, edad);\n    _classPrivateFieldSet(_direccion, this, direccion);\n  }\n\n  /**\r\n   * Obtiene el nombre de la persona.\r\n   * @returns {string} El nombre de la persona.\r\n   */\n  return _createClass(Persona, [{\n    key: \"nombre\",\n    get: function get() {\n      return _classPrivateFieldGet(_nombre, this);\n    }\n\n    /**\r\n     * Obtiene la edad de la persona.\r\n     * @returns {number} La edad de la persona.\r\n     */\n  }, {\n    key: \"edad\",\n    get: function get() {\n      return _classPrivateFieldGet(_edad, this);\n    }\n\n    /**\r\n     * Obtiene la dirección de la persona.\r\n     * @returns {Direccion} La dirección de la persona.\r\n     */\n  }, {\n    key: \"direccion\",\n    get: function get() {\n      return _classPrivateFieldGet(_direccion, this);\n    }\n  }]);\n}();\n\n\n//# sourceURL=webpack://main/./js/Persona.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asignatura.js */ \"./js/Asignatura.js\");\n/* harmony import */ var _Direccion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Direccion.js */ \"./js/Direccion.js\");\n/* harmony import */ var _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListadoEstudiantes.js */ \"./js/ListadoEstudiantes.js\");\n/* harmony import */ var _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListadoAsignaturas.js */ \"./js/ListadoAsignaturas.js\");\n// Proyecto Gestión de Estudiantes y Asignaturas \n// Autor: Aarón Ávila Moral\n\n// Para ver repositorio completo:\n// https://github.com/FyarX/DWEC_AaronAvilaMoral\n\n// ************* IMPORTACIÓN DE FICHEROS ******************\n\n\n\n\n\n\n// ************* CONJUNTO DE PRUEBAS DE CORRECTO FUNCIONAMIENTO ******************\n\n/**\r\n * Prueba de interacción con estudiantes y asignaturas.\r\n * \r\n * Esta función realiza las siguientes operaciones:\r\n * - Crea listas de estudiantes y asignaturas.\r\n * - Añade estudiantes y asignaturas a sus respectivas listas.\r\n * - Matricula y desmatricula estudiantes en asignaturas.\r\n * - Califica a los estudiantes en distintas asignaturas.\r\n * - Elimina estudiantes y asignaturas.\r\n * \r\n * @description Función principal para validar las operaciones con estudiantes y asignaturas.\r\n */\nfunction prueba() {\n  console.log(\"-------------Pruebas de interacción con estudiantes y asignaturas-----------------\");\n\n  //? Creación de listas de estudiantes y de asignaturas\n\n  /**\r\n   * Lista de estudiantes creada.\r\n   * @type {ListadoEstudiantes}\r\n   */\n  var listaEstudiantes = new _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListadoEstudiantes();\n\n  /**\r\n   * Lista de asignaturas creada.\r\n   * @type {ListadoAsignaturas}\r\n   */\n  var listaAsignaturas = new _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__.ListadoAsignaturas();\n  console.log(\"Listas de estudiantes y asignaturas creadas con éxito\");\n\n  //? Creación de estudiantes/asignaturas y eliminación de ambos con las funciones eliminaEstdiante y eliminaAsignatura\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: David Rodríguez.\r\n   */\n  var estudiante1 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"David Rodríguez\", 25, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Dr. Vaca Castro\", 6, \"Quinto A\", 43242, \"Granada\", \"Granada\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Marta Sánchez.\r\n   */\n  var estudiante2 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marta Sánchez\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Azorín\", 32, \"Bajo B\", 53242, \"Maracena\", \"Granada\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Marc Casadó.\r\n   */\n  var estudiante3 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marc Casadó\", 21, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Náyades\", 107, \"\", 12952, \"Sant Pere de Vilamajor\", \"Barcelona\"));\n\n  /**\r\n   * @type {Estudiante}\r\n   * @description Estudiante: Julian Carax.\r\n   */\n  var estudiante4 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Julian Carax\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Abad Moya\", 66, \"Tercero D\", 12805, \"Alcalá la Real\", \"Jaén\"));\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Matemática Discreta.\r\n   */\n  var matematicaDiscreta = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Matemática Discreta\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Lógica.\r\n   */\n  var logica = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Lógica\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Sistemas Digitales.\r\n   */\n  var sistemasDigitales = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Sistemas Digitales\");\n\n  /**\r\n   * @type {Asignatura}\r\n   * @description Asignatura: Ingeniería de Computadores.\r\n   */\n  var ingComputadores = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Ingeniería de Computadores\");\n  console.log(\"Estudiantes y asignaturas creados con éxito\");\n\n  //? Adición de estudiantes y asignaturas a sus respectivas listas con las funciones agregaEstudiante y agregaAsignatura\n\n  /**\r\n   * Agrega estudiantes y asignaturas a sus respectivas listas.\r\n   * Si ocurre un error durante el proceso, se captura y muestra en la consola.\r\n   */\n  try {\n    listaEstudiantes.agregaEstudiante(estudiante1);\n    listaEstudiantes.agregaEstudiante(estudiante2);\n    listaEstudiantes.agregaEstudiante(estudiante3);\n    listaEstudiantes.agregaEstudiante(estudiante4);\n    listaAsignaturas.agregaAsignatura(logica);\n    listaAsignaturas.agregaAsignatura(sistemasDigitales);\n    listaAsignaturas.agregaAsignatura(matematicaDiscreta);\n    listaAsignaturas.agregaAsignatura(ingComputadores);\n  } catch (error) {\n    console.log(\"Ha habido un error al agregar al estudiante/asignatura a la lista\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes y asignaturas agregados con éxito\");\n\n  // Eliminación de estudiantes/asignaturas\n\n  /**\r\n   * Elimina al estudiante Julian Carax de la lista de estudiantes.\r\n   */\n  listaEstudiantes.eliminaEstudiante(estudiante4);\n\n  /**\r\n   * Elimina la asignatura Ingeniería de Computadores de la lista de asignaturas.\r\n   */\n  listaAsignaturas.eliminaAsignatura(ingComputadores);\n  console.log(\"Estudiantes y asignaturas eliminados con éxito\");\n\n  //? Matriculación y desmatriculación de estudiantes en asignaturas con las funciones matricularEstudiante y desmatricularEstudiante\n\n  /**\r\n   * Matricula a los estudiantes en las asignaturas correspondientes.\r\n   * Si ocurre un error durante el proceso de matriculación, se captura y muestra en la consola.\r\n   */\n  try {\n    estudiante1.matricularEstudiante(logica, sistemasDigitales, ingComputadores);\n    estudiante2.matricularEstudiante(matematicaDiscreta, logica);\n    estudiante3.matricularEstudiante(logica, ingComputadores);\n    estudiante4.matricularEstudiante(sistemasDigitales);\n  } catch (error) {\n    console.log(\"Ha habido un error al matricular al estudiante\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes matriculados con éxito\");\n\n  /**\r\n   * Desmatricula al estudiante1 de la asignatura: lógica.\r\n   */\n  estudiante1.desmatricularEstudiante(logica);\n\n  /**\r\n   * Desmatricula al estudiante2 de la asignatura: matemática discreta.\r\n   */\n  estudiante2.desmatricularEstudiante(matematicaDiscreta);\n  console.log(\"Estudiantes desmatriculados con éxito\");\n\n  //? Calificación de estudiantes en asignaturas con la función calificarEstudiante\n\n  /**\r\n   * Califica a los estudiantes en las asignaturas correspondientes.\r\n   * Si ocurre un error durante el proceso de calificación, se captura y muestra en la consola.\r\n   */\n  try {\n    console.log(\"CALIFICACIÓN DE ESTUDIANTES\");\n\n    /**\r\n     * Califica al estudiante1 en Sistemas Digitales con nota 9.\r\n     */\n    estudiante1.calificarEstudiante(sistemasDigitales, 9);\n\n    /**\r\n     * Califica al estudiante1 en Sistemas Digitales con nota 7.\r\n     */\n    estudiante1.calificarEstudiante(sistemasDigitales, 7);\n\n    /**\r\n     * Califica al estudiante1 en Ingeniería de Computadores con nota 9.\r\n     */\n    estudiante1.calificarEstudiante(ingComputadores, 9);\n\n    /**\r\n     * Califica al estudiante2 en Matemática Discreta con nota 5.\r\n     */\n    estudiante2.calificarEstudiante(matematicaDiscreta, 5);\n    console.log(\"\\n\\n\");\n  } catch (error) {\n    console.log(\"Ha habido un error al calificar al estudiante\");\n    console.log(error);\n  }\n  console.log(\"Estudiantes calificados con éxito\");\n}\n\n// ****************** Programa principal *****************************\n/**\r\n * Muestra el menú principal y maneja la interacción del usuario.\r\n * @function\r\n */\nfunction mostrarMenu() {\n  console.log(\"Bienvenido a Gestion de Estudiantes y Asignaturas, selecciona con que deseas interactuar:\");\n  console.log(\"1. Estudiante concreto\");\n  console.log(\"2. Asignaturas\");\n  console.log(\"3. Listado de estudiantes\");\n  console.log(\"4. Deseo salir\");\n  var eleccionMenu = prompt(\"Selecciona el número de la opción que deseas interactuar\");\n  switch (eleccionMenu) {\n    case \"1\":\n      console.clear();\n      console.log(\"Opciones a realizar con un estudiante:\");\n      console.log(\"1. Agregar estudiante\");\n      console.log(\"2. Eliminar estudiante\");\n      console.log(\"3. Matricular en una asignatura\");\n      console.log(\"4. Desmatricular de una asignatura\");\n      console.log(\"5. Mostrar historial matriculación-desmatriculación\");\n      console.log(\"6. Calificar estudiante\");\n      console.log(\"7. Mostrar promedio\");\n      console.log(\"8. Mostrar reporte completo\");\n      console.log(\"9. Salir\");\n      var eleccionEstudiante = prompt(\"Selecciona el número de la opción deseada:\");\n      switch (eleccionEstudiante) {\n        /*\r\n        * Agrega un estudiante a la lista de estudiantes.\r\n        */\n        case \"1\":\n          console.clear();\n          try {\n            // Obtención del nombre del estudiante\n            console.log(\"Introduce el nombre del estudiante que deseas agregar:\");\n            var nombreEstudiante = prompt(\"Nombre del estudiante:\");\n\n            // Obtención de la edad del estudiante\n            console.log(\"Introduce la edad del estudiante:\");\n            var edadEstudiante = Number(prompt(\"Edad del estudiante:\"));\n\n            // Obtención de la calle del estudiante\n            console.log(\"Introduce la calle del estudiante:\");\n            var calleEstudiante = prompt(\"Calle del estudiante:\");\n\n            // Obtención del número de vivieda del estudiante\n            console.log(\"Introduce el número de vivienda:\");\n            var numeroEstudiante = Number(prompt(\"Número de vivienda del estudiante:\"));\n\n            // Obtención del número de piso del estudiante\n            console.log(\"Introduce el piso o pulsa ENTER si no vive en un piso:\");\n            var pisoEstudiante = prompt(\"Piso del estudiante:\");\n\n            // Obtención del código postal del estudiante\n            console.log(\"Introduce el código postal de la localidad:\");\n            var cpEstudiante = Number(prompt(\"Código postal del estudiante:\"));\n\n            // Obtención de la provincia del estudiante\n            console.log(\"Introduce la provincia:\");\n            var provinciaEstudiante = prompt(\"Provincia del estudiante:\");\n\n            // Obtención de la localidad del estudiante\n            console.log(\"Introduce la localidad:\");\n            var localidadEstudiante = prompt(\"Localidad del estudiante:\");\n\n            // Creación de la dirección completa del estudiante\n            var direccionEstudiante = new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(calleEstudiante, numeroEstudiante, pisoEstudiante, cpEstudiante, provinciaEstudiante, localidadEstudiante);\n\n            // Creación del estudiante con los datos obtenidos\n            var nuevoEstudiante = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(nombreEstudiante, edadEstudiante, direccionEstudiante);\n\n            // Agregado del estudiante a la lista de estudiantes\n            listaEstudiantes.agregaEstudiante(nuevoEstudiante);\n\n            // Mensaje de confirmación \n            console.log(\"Estudiante agregado con éxito\");\n          } catch (error) {\n            console.log(\"Ha habido un error al agregar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Elimina un estudiante de la lista de estudiantes.\r\n        */\n        case \"2\":\n          console.clear();\n\n          // Obtención del nombre del estudiante a eliminar\n          console.log(\"Introduce el nombre del estudiante que quieras eliminar\");\n          var estudianteEliminar = prompt(\"Nombre del estudiante a eliminar:\");\n          // Asignación de un objeto estudiante a la variable\n          estudianteEliminar = listaEstudiantes.busquedaEstudiante(estudianteEliminar);\n          // Eliminación del estudiante\n          listaEstudiantes.eliminaEstudiante(estudianteEliminar);\n          break;\n\n        /*\r\n        * Matricula un estudiante en una asignatura.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas matricular:\");\n          // Obtención del estudiante a matricular\n          var estudianteMatricular = prompt(\"Nombre del estudiante:\");\n          try {\n            estudianteMatricular = listaEstudiantes.busquedaEstudiante(estudianteMatricular);\n            console.log(\"Introduce el nombre de la asignatura eb la que deseas matricular al estudiante:\");\n\n            // Obtención de la asignatura a matricular\n            var _asignaturaMatricular = prompt(\"Nombre de la asignatura:\");\n            _asignaturaMatricular = listaAsignaturas.busquedaAsignatura(_asignaturaMatricular);\n\n            // Matriculación del estudiante en la asignatura\n            estudianteMatricular.matricularEstudiante(_asignaturaMatricular);\n          } catch (error) {\n            console.log(\"No se ha podido matricular a \".concat(estudianteMatricular.nombre, \" en \").concat(asignaturaMatricular.nombre));\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Desmatricula un estudiante de una asignatura.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas desmatricular:\");\n          // Obtención del estudiante a desmatricular\n          var estudianteDesmatricular = prompt(\"Nombre del estudiante:\");\n          try {\n            // Búsqueda del estudiante\n            estudianteDesmatricular = listaEstudiantes.busquedaEstudiante(estudianteDesmatricular);\n            console.log(\"Introduce el nombre de la asignatura de la que deseas desmatricular al estudiante:\");\n\n            // Obtención de la asignatura a desmatricular\n            var _asignaturaDesmatricular = prompt(\"Nombre de la asignatura:\");\n            _asignaturaDesmatricular = listaAsignaturas.busquedaAsignatura(_asignaturaDesmatricular);\n\n            // Desmatriculación de la asignatura\n            estudianteDesmatricular.desmatricularEstudiante(_asignaturaDesmatricular);\n          } catch (error) {\n            console.log(\"No se ha podido desmatricular a \".concat(estudianteDesmatricular.nombre, \" de \").concat(asignaturaDesmatricular.nombre));\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Muestra el historial de matriculaciones y desmatriculaciones de un estudiante.\r\n        */\n        case \"5\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante del que deseas ver el historial:\");\n          // Obtención del estudiante del que se quiere ver el historial\n          var estudianteHistorial = prompt(\"Nombre del estudiante:\");\n          // Búsqueda del estudiante\n          estudianteHistorial = listaEstudiantes.busquedaEstudiante(estudianteHistorial);\n          // Muestra del historial\n          console.log(estudianteHistorial.relacion);\n          break;\n\n        /*\r\n        * Califica a un estudiante en una asignatura.\r\n        */\n        case \"6\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre del estudiante al que deseas calificar:\");\n            // Obtención del estudiante al que se quiere calificar\n            var estudianteCalificar = prompt(\"Nombre del estudiante:\");\n            estudianteCalificar = listaEstudiantes.busquedaEstudiante(estudianteCalificar);\n            console.log(\"Introduce el nombre de la asignatura en la que deseas calificar al estudiante:\");\n            // Obtención de la asignatura en la que se quiere calificar al estudiante\n            var asignaturaCalificar = prompt(\"Nombre de la asignatura:\");\n            asignaturaCalificar = listaAsignaturas.busquedaAsignatura(asignaturaCalificar);\n            console.log(\"Introduce la calificación que deseas asignar al estudiante:\");\n            // Obtención de la calificación a asignar\n            var calificacion = prompt(\"Calificación:\");\n            // Calificación del estudiante\n            estudianteCalificar.calificar(asignaturaCalificar, calificacion);\n          } catch (error) {\n            console.log(\"Ha habido un error al calificar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Muestra el promedio de un estudiante.\r\n        */\n        case \"7\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante del que deseas ver el promedio:\");\n          // Obtención del estudiante del que se quiere ver el promedio\n          var estudiantePromedio = prompt(\"Nombre del estudiante:\");\n          estudiantePromedio = listaEstudiantes.busquedaEstudiante(estudiantePromedio);\n          // Muestra del promedio\n          console.log(estudiantePromedio.promedioEstudiante());\n          break;\n\n        /*\r\n        * Muestra el reporte completo de los estudiantes.\r\n        */\n        case \"8\":\n          console.clear();\n          console.log(\"Reporte completo de los estudiantes:\");\n          console.log(listaEstudiantes.reporte());\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"9\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 9 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"2\":\n      console.clear();\n      console.log(\"Opciones a realizar con una asignatura:\");\n      console.log(\"1. Agregar asignatura\");\n      console.log(\"2. Eliminar asignatura\");\n      console.log(\"3. Calcular promedio de las calificaciones de una asignatura\");\n      console.log(\"4. Buscar asignatura\");\n      console.log(\"5. Calificar asignatura\");\n      console.log(\"6. Salir\");\n      var eleccionAsignatura = prompt(\"Selecciona el número de la opción deseada:\");\n      switch (eleccionAsignatura) {\n        /*\r\n        * Agrega una asignatura a la lista de asignaturas.\r\n        */\n        case \"1\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre de la asignatura que deseas agregar\");\n            // Obtención del nombre de la asignatura a agregar\n            var nombreAsignatura = prompt(\"Nombre de la asignatura:\");\n            // Creación de la asignatura\n            var nuevaAsignatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(nombreAsignatura);\n            // Agregado de la asignatura a la lista de asignaturas\n            listaAsignaturas.agregaAsignatura(nuevaAsignatura);\n            console.log(\"Asignatura agregada con éxito\");\n          } catch (error) {\n            console.log(\"Ha habido un error al agregar la asignatura\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Elimina una asignatura de la lista de asignaturas.\r\n        */\n        case \"2\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura que deseas eliminar\");\n          // Obtención del nombre de la asignatura a eliminar\n          var nombreAsignaturaEliminar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura a eliminar\n          var asignaturaAEliminar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaEliminar);\n          // Eliminación de la asignatura\n          listaAsignaturas.eliminaAsignatura(asignaturaAEliminar);\n          break;\n\n        /*\r\n        * Calcula el promedio de las calificaciones de una asignatura.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura de la que deseas calcular el promedio\");\n          // Obtención del nombre de la asignatura de la que se quiere calcular el promedio\n          var nombreAsignaturaPromedio = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          var asignaturaPromedio = listaAsignaturas.busquedaAsignatura(nombreAsignaturaPromedio);\n          // Muestra del promedio\n          console.log(asignaturaPromedio.calculaPromedio());\n          break;\n\n        /*\r\n        * Busca una asignatura en la lista de asignaturas.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Introduce el nombre de la asignatura que deseas buscar\");\n          // Obtención del nombre de la asignatura a buscar\n          var nombreAsignaturaBuscar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          var asignaturaABuscar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaBuscar);\n          // Muestra de la asignatura\n          console.log(asignaturaABuscar.toString());\n          break;\n\n        /*\r\n        * Califica a los estudiantes de una asignatura.\r\n        */\n        case \"5\":\n          console.clear();\n\n          // Obtenemos el nombre de la asignatura a calificar\n          console.log(\"Introduce el nombre de la asignatura que deseas calificar\");\n          var nombreAsignaturaCalificar = prompt(\"Nombre de la asignatura:\");\n          // Búsqueda de la asignatura\n          var _asignaturaCalificar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaCalificar);\n          // Obtenemos la calificación a asignar\n          console.log(\"Introduce la calificación que deseas asignar a la asignatura\");\n          var calificacionAsignatura = prompt(\"Calificación:\");\n          // Calificación de la asignatura\n          _asignaturaCalificar.calificar(calificacionAsignatura);\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"6\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 5 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"3\":\n      console.clear();\n      console.log(\"Opciones a realizar con la lista de estudiantes:\");\n      console.log(\"1. Calcular promedio general de los estudiantes\");\n      console.log(\"2. Eliminar estudiantes de la lista\");\n      console.log(\"3. Buscar a un estudiante\");\n      console.log(\"4. Salir\");\n      var eleccionListaEstudiantes = prompt(\"Selecciona el número de la opción deseada:\");\n\n      //? Opciones sobre la lista de estudiantes\n      switch (eleccionListaEstudiantes) {\n        /*\r\n        * Calcula el promedio general de los estudiantes.\r\n        */\n        case \"1\":\n          console.clear();\n\n          // Muestra del promedio general de los estudiantes\n          console.log(\"El promedio general de los estudiantes es: \" + listaEstudiantes.promedioEstudiantes());\n          break;\n\n        /*\r\n        * Elimina un estudiante de la lista de estudiantes.\r\n        */\n        case \"2\":\n          console.clear();\n          try {\n            console.log(\"Introduce el nombre del estudiante que deseas eliminar de la lista\");\n            // Obtención del nombre del estudiante a eliminar\n            var _nombreEstudiante = prompt(\"Nombre del estudiante:\");\n            // Búsqueda del estudiante\n            var estudianteAEliminar = listaEstudiantes.busquedaEstudiante(_nombreEstudiante);\n            // Eliminación del estudiante\n            listaEstudiantes.eliminaEstudiante(estudianteAEliminar);\n          } catch (error) {\n            console.log(\"Ha habido un error al eliminar al estudiante\");\n            console.log(error);\n          }\n          break;\n\n        /*\r\n        * Busca un estudiante en la lista de estudiantes.\r\n        */\n        case \"3\":\n          console.clear();\n          console.log(\"Introduce el nombre del estudiante que deseas buscar\");\n          // Obtención del nombre del estudiante a buscar\n          var nombreEstudianteBuscar = prompt(\"Nombre del estudiante:\");\n          // Búsqueda del estudiante\n          var estudianteABuscar = listaEstudiantes.busquedaEstudiante(nombreEstudianteBuscar);\n          // Muestra del estudiante\n          console.log(estudianteABuscar.toString());\n          break;\n\n        /*\r\n        * Salir del programa.\r\n        */\n        case \"4\":\n          console.clear();\n          console.log(\"Saliendo del programa...\");\n          break;\n        default:\n          console.clear();\n          console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\n          mostrarMenu();\n      }\n      break;\n    case \"4\":\n      console.clear();\n      console.log(\"Saliendo del programa...\");\n      break;\n    default:\n      console.clear();\n      console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\n      mostrarMenu();\n  }\n}\n\n// Llamada al metodo de prueba de inicialización de datos\nprueba();\n\n// Llamada al método principal\nmostrarMenu();\n\n//# sourceURL=webpack://main/./js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/main.js");
/******/ 	
/******/ })()
;