/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/Asignatura.js":
/*!**************************!*\
  !*** ./js/Asignatura.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Asignatura: () => (/* binding */ Asignatura)\n/* harmony export */ });\n\r\n/**\r\n * Representa una asignatura.\r\n * @class\r\n */\r\nclass Asignatura {\r\n\r\n    #nombre;\r\n    #calificaciones;\r\n\r\n    /**\r\n     * Crea una nueva instancia de Asignatura.\r\n     * @constructor\r\n     * @param {string} nombre - El nombre de la asignatura. Solo se permiten letras y espacios.\r\n     */\r\n    constructor(nombre) {\r\n        // Filtrado de nombres\r\n        this.#nombre = (nombre.match(/^[A-Za-zÁÉÍÓÚáéíóú ]+$/)) ? nombre : \"Sin nombre\"; // Solo acepta letras y espacios\r\n\r\n        this.#calificaciones = [];\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio de las calificaciones si existen.\r\n     * @returns {number} El promedio de las calificaciones o 0 si no hay calificaciones.\r\n     */\r\n    calculaPromedio() {\r\n        // Comprueba si hay calificaciones\r\n        let longArray = this.#calificaciones.length;\r\n        if (longArray > 0) {\r\n\r\n            let sumArray = 0;\r\n            for (let i = 0; i < longArray; i++) {\r\n                sumArray += this.#calificaciones[i];\r\n            }\r\n\r\n            // Devuelve la media de las calificaciones\r\n            return sumArray / longArray;\r\n\r\n        } else {\r\n            console.log(\"No existen calificaciones\");\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Agrega una calificación a la asignatura.\r\n     * @param {number} nota - La calificación a agregar (debe estar entre 0 y 10).\r\n     * @throws {Error} Si la calificación no está en el rango permitido.\r\n     */\r\n    calificar(nota) {\r\n        if (0 <= nota && nota <= 10) {\r\n            // Agrega la calificación al array\r\n            this.#calificaciones.push(nota);\r\n        } else {\r\n            throw new Error(\"La calificación debe estar entre 0 y 10.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina una calificación de la asignatura.\r\n     * @param {number} nota - La calificación a eliminar.\r\n     * @throws {Error} Si la calificación no existe en la lista.\r\n     */\r\n    eliminarCalificacion(nota) {\r\n        if (this.#calificaciones.includes(nota)) {\r\n            // Separa del array las entradas con la calificación que se indique\r\n            this.#calificaciones.splice(this.#calificaciones.indexOf(nota), 1);\r\n        } else {\r\n            throw new Error(\"La nota no puede ser eliminada ya que no existe\");\r\n        }\r\n    }\r\n\r\n    // <<<<<<<<<<<<<<<<< Getters de la clase <<<<<<<<<<<<<<<<<<<<<\r\n\r\n    /**\r\n     * Obtiene el nombre de la asignatura.\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    get nombre() {\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * Obtiene las calificaciones de la asignatura.\r\n     * @type {number[]}\r\n     * @readonly\r\n     */\r\n    get calificaciones() {\r\n        return this.#calificaciones;\r\n    }\r\n\r\n    /**\r\n     * Convierte la información de la asignatura en una cadena de texto.\r\n     * @returns {string} Una representación en texto de la asignatura.\r\n     */\r\n    toString() {\r\n        return `Asignatura: ${this.nombre}`;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/Asignatura.js?");

/***/ }),

/***/ "./js/Direccion.js":
/*!*************************!*\
  !*** ./js/Direccion.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Direccion: () => (/* binding */ Direccion)\n/* harmony export */ });\n/**\r\n * Representa una dirección.\r\n * @class\r\n */\r\nclass Direccion {\r\n    #calle;\r\n    #numero;\r\n    #piso;\r\n    #cp;\r\n    #localidad;\r\n    #provincia;\r\n\r\n    /**\r\n     * @param {string} calle - Nombre de la calle.\r\n     * @param {string} provincia - Nombre de la provincia.\r\n     * @param {number} numero - Número de la vivienda.\r\n     * @param {string} piso - Número de piso.\r\n     * @param {number} cp - Código postal.\r\n     * @param {string} localidad - Nombre de la localidad.\r\n     * \r\n     */\r\n\r\n\r\n    constructor(calle, numero, piso, cp, localidad, provincia) {\r\n        this.#calle = calle;\r\n        this.#numero = numero;\r\n        this.#piso = piso;\r\n        this.#cp = cp;\r\n        this.#provincia = provincia;\r\n        this.#localidad = localidad;\r\n    }\r\n\r\n    /**\r\n     * Obtiene la calle.\r\n     * @returns {string} La calle.\r\n     */\r\n    get calle(){\r\n        return this.#calle;\r\n    }\r\n\r\n\r\n    /**\r\n     * Obtiene el número.\r\n     * @returns {number} \r\n     */\r\n    get numero() {\r\n        return this.#numero;\r\n    }\r\n\r\n    /**\r\n     * Obtiene el piso.\r\n     * @returns {string} \r\n     */\r\n    get piso() {\r\n        return this.#piso;\r\n    }\r\n\r\n    /**\r\n     * Obtiene el código postal.\r\n     * @returns {string}\r\n     */\r\n    get cp() {\r\n        return this.#cp;\r\n    }\r\n\r\n    /**\r\n     * Obtiene la provincia.\r\n     * @returns {string}\r\n     */\r\n    get provincia(){\r\n        return this.#provincia;\r\n    }\r\n    \r\n    /**\r\n     * Obtiene la localidad.\r\n     * @returns {string}\r\n     */\r\n    get localidad(){\r\n        return this.#localidad;\r\n    }\r\n\r\n    /**\r\n     * Representa la dirección como una cadena.\r\n     * @returns {string} Una cadena con la dirección completa.\r\n     */\r\n    toString() {\r\n        return `Calle: ${this.#calle}, Número: ${this.#numero}, Piso: ${this.#piso}, Código Postal: ${this.#cp}, Localidad: ${this.#localidad}(${this.#provincia})`;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://main/./js/Direccion.js?");

/***/ }),

/***/ "./js/Estudiante.js":
/*!**************************!*\
  !*** ./js/Estudiante.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Estudiante: () => (/* binding */ Estudiante)\n/* harmony export */ });\n/* harmony import */ var _Persona_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Persona.js */ \"./js/Persona.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Representa un estudiante que hereda de Persona.\r\n * @extends Persona\r\n * @class\r\n */\r\nclass Estudiante extends _Persona_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    #id;\r\n    #asignaturas;\r\n    #relacion;\r\n\r\n    static contadorId = 1;\r\n\r\n    /**\r\n     * Crea una nueva instancia de Estudiante.\r\n     * @constructor\r\n     * @param {string} nombre - Nombre del estudiante.\r\n     * @param {number} edad - Edad del estudiante.\r\n     * @param {Direccion} direccion - Dirección del estudiante.\r\n     */\r\n    constructor(nombre, edad, direccion) {\r\n        super(nombre, edad, direccion);\r\n        this.#id = Estudiante.contadorId++;\r\n        this.#asignaturas = [];\r\n        this.#relacion = [];\r\n    }\r\n\r\n    /**\r\n     * Matricula al estudiante en una o más asignaturas.\r\n     * @param {...Asignatura} asignaturas - Las asignaturas en las que se matricula al estudiante.\r\n     */\r\n    matricularEstudiante(...asignaturas) {\r\n        for (let asignatura of asignaturas) {\r\n            this.#asignaturas.push(asignatura);\r\n            this.#relacion.push([`Matriculación de ${asignatura.nombre}`, new Date()]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Desmatricula al estudiante de una o más asignaturas.\r\n     * @param {...Asignatura} asignaturas - Las asignaturas de las que se desmatricula al estudiante.\r\n     */\r\n    desmatricularEstudiante(...asignaturas) {\r\n        for (let asignatura of asignaturas) {\r\n            this.#asignaturas = this.#asignaturas.filter(a => a.nombre !== asignatura.nombre);\r\n            this.#relacion.push([`Desmatriculación de ${asignatura.nombre}`, new Date()]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Califica al estudiante en una asignatura.\r\n     * @param {Asignatura} asignatura - La asignatura que se calificará.\r\n     * @param {number} nota - La nota que se asignará.\r\n     * @throws {Error} Si no hay nota o no es válida, o si el estudiante no está matriculado.\r\n     */\r\n    calificar(asignatura, nota) {\r\n        if (arguments.length === 1) {\r\n            throw new Error(\"Faltan datos para calificar al estudiante\");\r\n        }\r\n        const asignaturaMatriculada = this.#asignaturas.find(a => a.nombre === asignatura.nombre);\r\n        if (!asignaturaMatriculada) {\r\n            throw new Error(\"El estudiante no está matriculado en esta asignatura\");\r\n        }\r\n        if (nota < 0 || nota > 10) {\r\n            throw new Error(\"La calificación debe estar entre 0 y 10.\");\r\n        }\r\n        asignaturaMatriculada.calificar(nota);\r\n    }\r\n\r\n    /**\r\n     * Devuelve el historial de acciones del estudiante.\r\n     * @returns {string[]} El historial de matriculaciones y desmatriculaciones.\r\n     */\r\n    get relacion() {\r\n        return this.#relacion.map(([accion, fecha]) => {\r\n            const fechaFormateada = fecha.toLocaleDateString('es-ES', {\r\n                weekday: 'long',\r\n                day: '2-digit',\r\n                month: 'long',\r\n                year: 'numeric'\r\n            });\r\n            return `${accion} - ${fechaFormateada}`;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio de calificaciones del estudiante.\r\n     * @returns {string} El promedio calculado.\r\n     */\r\n    promedioEstudiante() {\r\n        let sumatorio = 0;\r\n        let contador = 0;\r\n        for (let asignatura of this.#asignaturas) {\r\n            const promedioAsignatura = asignatura.calculaPromedio();\r\n            if (promedioAsignatura !== 0) {\r\n                sumatorio += promedioAsignatura;\r\n                contador++;\r\n            }\r\n        }\r\n        return contador === 0 ? 0 : `El promedio del estudiante es ${(sumatorio / contador).toFixed(2)}`;\r\n    }\r\n\r\n    /**\r\n     * Obtiene las asignaturas del estudiante.\r\n     * @returns {Asignatura[]} Las asignaturas del estudiante.\r\n     */\r\n    get asignaturas() {\r\n        return this.#asignaturas;\r\n    }\r\n\r\n    /**\r\n     * Representa al estudiante como una cadena.\r\n     * @returns {string} Una cadena con los datos del estudiante.\r\n     */\r\n    toString() {\r\n        return `Estudiante: ${this.nombre}, ID: ${this.#id}, Dirección: ${this.direccion}`;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://main/./js/Estudiante.js?");

/***/ }),

/***/ "./js/ListadoAsignaturas.js":
/*!**********************************!*\
  !*** ./js/ListadoAsignaturas.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoAsignaturas: () => (/* binding */ ListadoAsignaturas)\n/* harmony export */ });\n\r\n/**\r\n * Representa un listado de asignaturas.\r\n * @class\r\n */\r\nclass ListadoAsignaturas {\r\n\r\n    #listaAsignaturas;\r\n\r\n    /**\r\n     * Crea una nueva instancia de ListadoAsignaturas.\r\n     * @constructor\r\n     * @param {...Asignatura} asignaturas - Las asignaturas a agregar inicialmente.\r\n     */\r\n    constructor(...asignaturas) {\r\n        this.#listaAsignaturas = [];\r\n        for (let asignatura of asignaturas) {\r\n            // Agrega las asignaturas que se pasan como parámetro\r\n            this.añadeAsignatura(asignatura);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Agrega una asignatura al listado.\r\n     * @param {Asignatura} asignatura - La asignatura a agregar.\r\n     */\r\n    agregaAsignatura(asignatura) {\r\n        this.#listaAsignaturas.push(asignatura);\r\n    }\r\n\r\n    /**\r\n     * Elimina una asignatura del listado.\r\n     * @param {Asignatura} asignatura - La asignatura a eliminar.\r\n     * @throws {Error} Si la asignatura no se encuentra en el listado.\r\n     */\r\n    eliminaAsignatura(asignatura) {\r\n        // Comprueba si la asignatura está en la lista\r\n        if (this.#listaAsignaturas.includes(asignatura)) {\r\n            // Filtra todas las asignaturas menos la que queremos eliminar\r\n            this.#listaAsignaturas.filter(a => a !== asignatura);\r\n            console.log(\"Asignatura eliminada con éxito\");\r\n        } else {\r\n            throw new Error(\"La asignatura no se encuentra en el listado\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Busca asignaturas que coincidan parcialmente con un patrón.\r\n     * @param {string} patron - El patrón a buscar.\r\n     * @returns {Asignatura[]} Las asignaturas que coinciden con el patrón.\r\n     * @throws {Error} Si el patrón no es una cadena de texto.\r\n     */\r\n    busquedaAsignatura(patron) {\r\n        // Comprueba si el patrón es una cadena de texto\r\n        if (typeof patron !== \"string\") throw new Error(\"El patrón debe ser una cadena de texto\");\r\n        let patronAsignatura = new RegExp(patron, \"i\");\r\n        // Filtra las asignaturas que cumplen el patrón\r\n        return this.#listaAsignaturas.filter(asignatura => patronAsignatura.test(asignatura.nombre));\r\n    }\r\n\r\n    /**\r\n     * Obtiene la lista completa de asignaturas.\r\n     * @returns {Asignatura[]} El listado de asignaturas.\r\n     */\r\n    get listaAsignaturas() {\r\n        return this.#listaAsignaturas;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/ListadoAsignaturas.js?");

/***/ }),

/***/ "./js/ListadoEstudiantes.js":
/*!**********************************!*\
  !*** ./js/ListadoEstudiantes.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListadoEstudiantes: () => (/* binding */ ListadoEstudiantes)\n/* harmony export */ });\n/**\r\n * Representa un listado de estudiantes.\r\n * @class\r\n */\r\nclass ListadoEstudiantes {\r\n\r\n    #listaEstudiantes;\r\n\r\n    /**\r\n     * Crea una nueva instancia de ListadoEstudiantes.\r\n     * @constructor\r\n     * @param {...Estudiante} estudiantes - Los estudiantes a agregar inicialmente.\r\n     */\r\n    constructor(...estudiantes) {\r\n        this.#listaEstudiantes = [];\r\n\r\n        // Agrega cada estudiante que se pase como parámetro al array creado previamente\r\n        for (let estudiante of estudiantes) {\r\n            this.agregaEstudiante(estudiante);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Agrega un estudiante al listado.\r\n     * @param {Estudiante} estudiante - El estudiante a agregar.\r\n     * @throws {Error} Si el estudiante ya está en la lista.\r\n     */\r\n    agregaEstudiante(estudiante) {\r\n        // Comprueba si el estudiante ya está en la lista\r\n        if (this.#listaEstudiantes.includes(estudiante)) {\r\n            throw new Error(\"El estudiante ya se encuentra en la lista, no puede haber duplicados\");\r\n        } else {\r\n            this.#listaEstudiantes.push(estudiante);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina un estudiante del listado.\r\n     * @param {Estudiante} estudiante - El estudiante a eliminar.\r\n     * @throws {Error} Si el estudiante no se encuentra en la lista.\r\n     */\r\n    eliminaEstudiante(estudiante) {\r\n        if (this.#listaEstudiantes.includes(estudiante)) {\r\n            // Filtra a todos los estudiantes menos el que queremos eliminar\r\n            this.#listaEstudiantes = this.#listaEstudiantes.filter(e => e !== estudiante);\r\n            console.log(\"Estudiante eliminado con éxito\");\r\n        } else {\r\n            throw new Error(\"El estudiante no se encuentra en el listado\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calcula el promedio general de todos los estudiantes.\r\n     * @returns {number|string} El promedio general o un mensaje si no hay estudiantes.\r\n     */\r\n    promedioEstudiantes() {\r\n        // Comprueba si hay estudiantes en la lista\r\n        if (this.#listaEstudiantes.length === 0) return \"No existe ningún estudiante en la lista\";\r\n\r\n        let sum = 0;\r\n        let contador = 0;\r\n\r\n        for (let estudiante of this.#listaEstudiantes) {\r\n            // Se obtiene la media de cada estudiante por separado\r\n            let promEstudiante = estudiante.promedioEstudiante();\r\n\r\n            // Si la media es un número, se suma al sumatorio y se incrementa el contador\r\n            if (typeof promEstudiante === \"number\") {\r\n                sum += promEstudiante;\r\n                contador++;\r\n            }\r\n        }\r\n\r\n        let promedioTotal = (sum / contador).toFixed(2);\r\n        return Number(promedioTotal);\r\n    }\r\n\r\n    /**\r\n     * Muestra un reporte con el nombre, calificaciones y promedio de cada estudiante.\r\n     */\r\n    reporte() {\r\n        // Recorre la lista de estudiantes y muestra su nombre, calificaciones y promedio\r\n        this.#listaEstudiantes.forEach(estudiante => {\r\n            console.log();\r\n            console.log(`Nombre del estudiante: ${estudiante.nombre}`);\r\n            console.log(`Calificaciones:`);\r\n            // Muestra las calificaciones de cada asignatura\r\n            estudiante.asignaturas.forEach(asignatura => {\r\n                const nota = Number(asignatura[1]);\r\n                console.log(`${asignatura.nombre}: ${nota}`);\r\n            });\r\n            console.log(`Promedio: ${estudiante.promedioEstudiante()}`);\r\n            console.log(\"--------------------------------\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Busca estudiantes que coincidan parcialmente con un patrón.\r\n     * @param {string} patron - El patrón a buscar.\r\n     * @returns {Estudiante[]} Los estudiantes que coinciden con el patrón.\r\n     * @throws {Error} Si el patrón no es una cadena de texto.\r\n     */\r\n    busquedaEstudiante(patron) {\r\n        // Comprueba si el patrón es una cadena de texto\r\n        if (typeof patron !== \"string\") {\r\n            throw new Error(\"El patrón debe ser una cadena de texto\");\r\n        }\r\n\r\n        // Crea un patrón de búsqueda\r\n        let patronEstudiante = new RegExp(patron, \"i\");\r\n        // Devuelve todos los estudiantes que coinciden con el patrón\r\n        return this.#listaEstudiantes.filter(estudiante => patronEstudiante.test(estudiante.nombre));\r\n    }\r\n\r\n    /**\r\n     * Obtiene una copia de la lista de estudiantes.\r\n     * @returns {Estudiante[]} Una copia del listado de estudiantes.\r\n     */\r\n    getListadoEstudiantes() {\r\n        // Devuelve una copia de la lista de estudiantes\r\n        return [...this.#listaEstudiantes];\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/ListadoEstudiantes.js?");

/***/ }),

/***/ "./js/Persona.js":
/*!***********************!*\
  !*** ./js/Persona.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Persona)\n/* harmony export */ });\n/**\r\n * Representa una persona genérica.\r\n * @class\r\n */\r\nclass Persona {\r\n    #nombre;\r\n    #edad;\r\n    #direccion;\r\n\r\n    /**\r\n     * Crea una nueva instancia de Persona.\r\n     * @constructor\r\n     * @param {string} nombre - Nombre de la persona.\r\n     * @param {number} edad - Edad de la persona.\r\n     * @param {Direccion} direccion - Dirección de la persona.\r\n     * @throws {Error} Si el nombre contiene caracteres no válidos.\r\n     */\r\n    constructor(nombre, edad, direccion) {\r\n        if (!nombre.match(/[A-Za-zÁÉÍÓÚáéíóú ]+/)) {\r\n            throw new Error(\"El nombre debe contener solo letras y espacios\");\r\n        } else {\r\n            this.#nombre = nombre;\r\n        }\r\n        this.#edad = edad;\r\n        this.#direccion = direccion;\r\n    }\r\n\r\n    /**\r\n     * Obtiene el nombre de la persona.\r\n     * @returns {string} El nombre de la persona.\r\n     */\r\n    get nombre() {\r\n        return this.#nombre;\r\n    }\r\n\r\n    /**\r\n     * Obtiene la edad de la persona.\r\n     * @returns {number} La edad de la persona.\r\n     */\r\n    get edad() {\r\n        return this.#edad;\r\n    }\r\n\r\n    /**\r\n     * Obtiene la dirección de la persona.\r\n     * @returns {Direccion} La dirección de la persona.\r\n     */\r\n    get direccion() {\r\n        return this.#direccion;\r\n    }\r\n}\n\n//# sourceURL=webpack://main/./js/Persona.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Estudiante.js */ \"./js/Estudiante.js\");\n/* harmony import */ var _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Asignatura.js */ \"./js/Asignatura.js\");\n/* harmony import */ var _Direccion_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Direccion.js */ \"./js/Direccion.js\");\n/* harmony import */ var _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ListadoEstudiantes.js */ \"./js/ListadoEstudiantes.js\");\n/* harmony import */ var _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ListadoAsignaturas.js */ \"./js/ListadoAsignaturas.js\");\n// Proyecto Gestión de Estudiantes y Asignaturas \r\n// Autor: Aarón Ávila Moral\r\n\r\n// Para ver repositorio completo:\r\n// https://github.com/FyarX/DWEC_AaronAvilaMoral\r\n\r\n\r\n// ************* IMPORTACIÓN DE FICHEROS ******************\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ************* CONJUNTO DE PRUEBAS DE CORRECTO FUNCIONAMIENTO ******************\r\n\r\n/**\r\n * Prueba de interacción con estudiantes y asignaturas.\r\n * \r\n * Esta función realiza las siguientes operaciones:\r\n * - Crea listas de estudiantes y asignaturas.\r\n * - Añade estudiantes y asignaturas a sus respectivas listas.\r\n * - Matricula y desmatricula estudiantes en asignaturas.\r\n * - Califica a los estudiantes en distintas asignaturas.\r\n * - Elimina estudiantes y asignaturas.\r\n * \r\n * @description Función principal para validar las operaciones con estudiantes y asignaturas.\r\n */\r\nfunction prueba() {\r\n\r\n    console.log(\"-------------Pruebas de interacción con estudiantes y asignaturas-----------------\");\r\n\r\n    //? Creación de listas de estudiantes y de asignaturas\r\n\r\n    /**\r\n     * Lista de estudiantes creada.\r\n     * @type {ListadoEstudiantes}\r\n     */\r\n    let listaEstudiantes = new _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListadoEstudiantes();\r\n\r\n    /**\r\n     * Lista de asignaturas creada.\r\n     * @type {ListadoAsignaturas}\r\n     */\r\n    let listaAsignaturas = new _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__.ListadoAsignaturas();\r\n\r\n    console.log(\"Listas de estudiantes y asignaturas creadas con éxito\");\r\n\r\n    //? Creación de estudiantes/asignaturas y eliminación de ambos con las funciones eliminaEstdiante y eliminaAsignatura\r\n\r\n    /**\r\n     * @type {Estudiante}\r\n     * @description Estudiante: David Rodríguez.\r\n     */\r\n    let estudiante1 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"David Rodríguez\", 25, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Dr. Vaca Castro\", 6, \"Quinto A\", 43242, \"Granada\", \"Granada\"));\r\n\r\n    /**\r\n     * @type {Estudiante}\r\n     * @description Estudiante: Marta Sánchez.\r\n     */\r\n    let estudiante2 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marta Sánchez\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Azorín\", 32, \"Bajo B\", 53242, \"Maracena\", \"Granada\"));\r\n\r\n    /**\r\n     * @type {Estudiante}\r\n     * @description Estudiante: Marc Casadó.\r\n     */\r\n    let estudiante3 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Marc Casadó\", 21, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Náyades\", 107, \"\", 12952, \"Sant Pere de Vilamajor\", \"Barcelona\"));\r\n\r\n    /**\r\n     * @type {Estudiante}\r\n     * @description Estudiante: Julian Carax.\r\n     */\r\n    let estudiante4 = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(\"Julian Carax\", 22, new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(\"Abad Moya\", 66, \"Tercero D\", 12805, \"Alcalá la Real\", \"Jaén\"));\r\n\r\n    /**\r\n     * @type {Asignatura}\r\n     * @description Asignatura: Matemática Discreta.\r\n     */\r\n    const matematicaDiscreta = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Matemática Discreta\");\r\n\r\n    /**\r\n     * @type {Asignatura}\r\n     * @description Asignatura: Lógica.\r\n     */\r\n    const logica = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Lógica\");\r\n\r\n    /**\r\n     * @type {Asignatura}\r\n     * @description Asignatura: Sistemas Digitales.\r\n     */\r\n    const sistemasDigitales = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Sistemas Digitales\");\r\n\r\n    /**\r\n     * @type {Asignatura}\r\n     * @description Asignatura: Ingeniería de Computadores.\r\n     */\r\n    const ingComputadores = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(\"Ingeniería de Computadores\");\r\n\r\n    console.log(\"Estudiantes y asignaturas creados con éxito\");\r\n\r\n\r\n    //? Adición de estudiantes y asignaturas a sus respectivas listas con las funciones agregaEstudiante y agregaAsignatura\r\n\r\n    /**\r\n     * Agrega estudiantes y asignaturas a sus respectivas listas.\r\n     * Si ocurre un error durante el proceso, se captura y muestra en la consola.\r\n     */\r\n    try {\r\n        listaEstudiantes.agregaEstudiante(estudiante1);\r\n        listaEstudiantes.agregaEstudiante(estudiante2);\r\n        listaEstudiantes.agregaEstudiante(estudiante3);\r\n\r\n        listaAsignaturas.agregaAsignatura(logica);\r\n        listaAsignaturas.agregaAsignatura(sistemasDigitales);\r\n        listaAsignaturas.agregaAsignatura(matematicaDiscreta);\r\n        listaAsignaturas.agregaAsignatura(ingComputadores);\r\n    } catch (error) {\r\n        console.log(\"Ha habido un error al agregar al estudiante/asignatura a la lista\");\r\n        console.log(error);\r\n    }\r\n\r\n    console.log(\"Estudiantes y asignaturas agregados con éxito\");\r\n\r\n\r\n    // Eliminación de estudiantes/asignaturas\r\n\r\n\r\n    /**\r\n     * Elimina al estudiante Julian Carax de la lista de estudiantes.\r\n     */\r\n    _ListadoEstudiantes_js__WEBPACK_IMPORTED_MODULE_3__.ListadoEstudiantes.eliminaEstudiante(estudiante4);\r\n\r\n    /**\r\n     * Elimina la asignatura Ingeniería de Computadores de la lista de asignaturas.\r\n     */\r\n    _ListadoAsignaturas_js__WEBPACK_IMPORTED_MODULE_4__.ListadoAsignaturas.eliminaAsignatura(ingComputadores);\r\n\r\n    console.log(\"Estudiantes y asignaturas eliminados con éxito\");\r\n\r\n    //? Matriculación y desmatriculación de estudiantes en asignaturas con las funciones matricularEstudiante y desmatricularEstudiante\r\n\r\n    /**\r\n     * Matricula a los estudiantes en las asignaturas correspondientes.\r\n     * Si ocurre un error durante el proceso de matriculación, se captura y muestra en la consola.\r\n     */\r\n    try {\r\n        estudiante1.matricularEstudiante(logica, sistemasDigitales, ingComputadores);\r\n        estudiante2.matricularEstudiante(matematicaDiscreta, logica);\r\n        estudiante3.matricularEstudiante(logica, ingComputadores);\r\n        estudiante4.matricularEstudiante(sistemasDigitales);\r\n    } catch (error) {\r\n        console.log(\"Ha habido un error al matricular al estudiante\");\r\n        console.log(error);\r\n    }\r\n\r\n    console.log(\"Estudiantes matriculados con éxito\");\r\n\r\n    /**\r\n     * Desmatricula al estudiante1 de la asignatura: lógica.\r\n     */\r\n    estudiante1.desmatricularEstudiante(logica);\r\n\r\n    /**\r\n     * Desmatricula al estudiante2 de la asignatura: matemática discreta.\r\n     */\r\n    estudiante2.desmatricularEstudiante(matematicaDiscreta);\r\n\r\n    console.log(\"Estudiantes desmatriculados con éxito\");\r\n\r\n    \r\n\r\n    //? Calificación de estudiantes en asignaturas con la función calificarEstudiante\r\n\r\n    /**\r\n     * Califica a los estudiantes en las asignaturas correspondientes.\r\n     * Si ocurre un error durante el proceso de calificación, se captura y muestra en la consola.\r\n     */\r\n    try {\r\n        console.log(\"CALIFICACIÓN DE ESTUDIANTES\");\r\n\r\n        /**\r\n         * Califica al estudiante1 en Sistemas Digitales con nota 9.\r\n         */\r\n        estudiante1.calificarEstudiante(sistemasDigitales, 9);\r\n\r\n        /**\r\n         * Califica al estudiante1 en Sistemas Digitales con nota 7.\r\n         */\r\n        estudiante1.calificarEstudiante(sistemasDigitales, 7);\r\n\r\n        /**\r\n         * Califica al estudiante1 en Ingeniería de Computadores con nota 9.\r\n         */\r\n        estudiante1.calificarEstudiante(ingComputadores, 9);\r\n\r\n        /**\r\n         * Califica al estudiante2 en Matemática Discreta con nota 5.\r\n         */\r\n        estudiante2.calificarEstudiante(matematicaDiscreta, 5);\r\n\r\n        console.log(\"\\n\\n\");\r\n    } catch (error) {\r\n        console.log(\"Ha habido un error al calificar al estudiante\");\r\n        console.log(error);\r\n    }\r\n\r\n    console.log(\"Estudiantes calificados con éxito\");\r\n}\r\n\r\n// ****************** Programa principal *****************************\r\n/**\r\n * Muestra el menú principal y maneja la interacción del usuario.\r\n * @function\r\n */\r\nfunction mostrarMenu(){\r\n\r\n    console.log(\"Bienvenido a Gestion de Estudiantes y Asignaturas, selecciona con que deseas interactuar:\");\r\n    console.log(\"1. Estudiante concreto\");\r\n    console.log(\"2. Asignaturas\");\r\n    console.log(\"3. Listado de estudiantes\");\r\n    console.log(\"4. Deseo salir\");\r\n\r\n    const eleccionMenu = prompt(\"Selecciona el número de la opción que deseas interactuar\");\r\n    \r\n    switch(eleccionMenu){\r\n        case \"1\":\r\n            console.clear();\r\n            console.log(\"Opciones a realizar con un estudiante:\");\r\n            console.log(\"1. Agregar estudiante\");\r\n            console.log(\"2. Eliminar estudiante\");\r\n            console.log(\"3. Matricular en una asignatura\");\r\n            console.log(\"4. Desmatricular de una asignatura\");\r\n            console.log(\"5. Mostrar historial matriculación-desmatriculación\");\r\n            console.log(\"6. Calificar estudiante\");\r\n            console.log(\"7. Mostrar promedio\");\r\n            console.log(\"8. Mostrar reporte completo\");\r\n            console.log(\"9. Salir\");\r\n            \r\n            const eleccionEstudiante = prompt(\"Selecciona el número de la opción deseada:\")\r\n            switch(eleccionEstudiante){\r\n                /*\r\n                * Agrega un estudiante a la lista de estudiantes.\r\n                */\r\n                case \"1\": \r\n                    console.clear();\r\n\r\n                    try{\r\n                    // Obtención del nombre del estudiante\r\n                    console.log(\"Introduce el nombre del estudiante que deseas agregar:\");\r\n                    const nombreEstudiante = prompt(\"Nombre del estudiante:\");\r\n\r\n                    // Obtención de la edad del estudiante\r\n                    console.log(\"Introduce la edad del estudiante:\");\r\n                    const edadEstudiante = Number(prompt(\"Edad del estudiante:\"));\r\n\r\n                    // Obtención de la calle del estudiante\r\n                    console.log(\"Introduce la calle del estudiante:\");\r\n                    const calleEstudiante = prompt(\"Calle del estudiante:\");\r\n\r\n                    // Obtención del número de vivieda del estudiante\r\n                    console.log(\"Introduce el número de vivienda:\");\r\n                    const numeroEstudiante = Number(prompt(\"Número de vivienda del estudiante:\"));\r\n\r\n                    // Obtención del número de piso del estudiante\r\n                    console.log(\"Introduce el piso o pulsa ENTER si no vive en un piso:\");\r\n                    const pisoEstudiante = prompt(\"Piso del estudiante:\");\r\n\r\n                    // Obtención del código postal del estudiante\r\n                    console.log(\"Introduce el código postal de la localidad:\");\r\n                    const cpEstudiante = Number(prompt(\"Código postal del estudiante:\"));\r\n\r\n                    // Obtención de la provincia del estudiante\r\n                    console.log(\"Introduce la provincia:\");\r\n                    const provinciaEstudiante = prompt(\"Provincia del estudiante:\");\r\n\r\n                    // Obtención de la localidad del estudiante\r\n                    console.log(\"Introduce la localidad:\");\r\n                    const localidadEstudiante = prompt(\"Localidad del estudiante:\");\r\n\r\n                    // Creación de la dirección completa del estudiante\r\n                    const direccionEstudiante = new _Direccion_js__WEBPACK_IMPORTED_MODULE_2__.Direccion(calleEstudiante, numeroEstudiante, pisoEstudiante, cpEstudiante, provinciaEstudiante, localidadEstudiante);\r\n                    \r\n                    // Creación del estudiante con los datos obtenidos\r\n                    const nuevoEstudiante = new _Estudiante_js__WEBPACK_IMPORTED_MODULE_0__.Estudiante(nombreEstudiante, edadEstudiante, direccionEstudiante);\r\n\r\n                    // Agregado del estudiante a la lista de estudiantes\r\n                    listaEstudiantes.agregaEstudiante(nuevoEstudiante);\r\n\r\n                    // Mensaje de confirmación \r\n                    console.log(\"Estudiante agregado con éxito\");\r\n                    } catch (error){\r\n                        console.log(\"Ha habido un error al agregar al estudiante\");\r\n                        console.log(error);\r\n                    }\r\n\r\n                    break;\r\n\r\n                /*\r\n                * Elimina un estudiante de la lista de estudiantes.\r\n                */\r\n                case \"2\":\r\n                    console.clear();\r\n\r\n                    // Obtención del nombre del estudiante a eliminar\r\n                    console.log(\"Introduce el nombre del estudiante que quieras eliminar\");\r\n                    let estudianteEliminar = prompt(\"Nombre del estudiante a eliminar:\");\r\n                    // Asignación de un objeto estudiante a la variable\r\n                    estudianteEliminar = listaEstudiantes.busquedaEstudiante(estudianteEliminar);\r\n                    // Eliminación del estudiante\r\n                    listaEstudiantes.eliminaEstudiante(estudianteEliminar);\r\n                    \r\n                    break;\r\n\r\n                /*\r\n                * Matricula un estudiante en una asignatura.\r\n                */\r\n                case \"3\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre del estudiante que deseas matricular:\");\r\n                    // Obtención del estudiante a matricular\r\n                    let estudianteMatricular = prompt(\"Nombre del estudiante:\");\r\n\r\n                    try{\r\n\r\n                        estudianteMatricular = listaEstudiantes.busquedaEstudiante(estudianteMatricular);\r\n                        console.log(\"Introduce el nombre de la asignatura eb la que deseas matricular al estudiante:\");\r\n\r\n                        // Obtención de la asignatura a matricular\r\n                        let asignaturaMatricular = prompt(\"Nombre de la asignatura:\");\r\n                        asignaturaMatricular = listaAsignaturas.busquedaAsignatura(asignaturaMatricular);\r\n\r\n                        // Matriculación del estudiante en la asignatura\r\n                        estudianteMatricular.matricularEstudiante(asignaturaMatricular);\r\n\r\n                    } catch (error){\r\n\r\n                        console.log(`No se ha podido matricular a ${estudianteMatricular.nombre} en ${asignaturaMatricular.nombre}`);\r\n                        console.log(error);\r\n\r\n                    }\r\n                    break;\r\n\r\n                /*\r\n                * Desmatricula un estudiante de una asignatura.\r\n                */\r\n                case \"4\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre del estudiante que deseas desmatricular:\");\r\n                    // Obtención del estudiante a desmatricular\r\n                    let estudianteDesmatricular = prompt(\"Nombre del estudiante:\");\r\n                    try{\r\n\r\n                        // Búsqueda del estudiante\r\n                        estudianteDesmatricular = listaEstudiantes.busquedaEstudiante(estudianteDesmatricular);\r\n                        console.log(\"Introduce el nombre de la asignatura de la que deseas desmatricular al estudiante:\");\r\n\r\n                        // Obtención de la asignatura a desmatricular\r\n                        let asignaturaDesmatricular = prompt(\"Nombre de la asignatura:\");\r\n                        asignaturaDesmatricular = listaAsignaturas.busquedaAsignatura(asignaturaDesmatricular);\r\n\r\n                        // Desmatriculación de la asignatura\r\n                        estudianteDesmatricular.desmatricularEstudiante(asignaturaDesmatricular);\r\n\r\n                    } catch (error){\r\n\r\n                        console.log(`No se ha podido desmatricular a ${estudianteDesmatricular.nombre} de ${asignaturaDesmatricular.nombre}`);\r\n                        console.log(error);\r\n                        \r\n                    }\r\n                    break;\r\n\r\n                /*\r\n                * Muestra el historial de matriculaciones y desmatriculaciones de un estudiante.\r\n                */\r\n                case \"5\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre del estudiante del que deseas ver el historial:\");\r\n                    // Obtención del estudiante del que se quiere ver el historial\r\n                    let estudianteHistorial = prompt(\"Nombre del estudiante:\");\r\n                    // Búsqueda del estudiante\r\n                    estudianteHistorial = listaEstudiantes.busquedaEstudiante(estudianteHistorial);\r\n                    // Muestra del historial\r\n                    console.log(estudianteHistorial.relacion); \r\n\r\n                    break;\r\n\r\n                /*\r\n                * Califica a un estudiante en una asignatura.\r\n                */\r\n                case \"6\":\r\n                    console.clear();\r\n\r\n                    try{\r\n                    console.log(\"Introduce el nombre del estudiante al que deseas calificar:\");\r\n                    // Obtención del estudiante al que se quiere calificar\r\n                    let estudianteCalificar = prompt(\"Nombre del estudiante:\");\r\n                    estudianteCalificar = listaEstudiantes.busquedaEstudiante(estudianteCalificar);\r\n                    console.log(\"Introduce el nombre de la asignatura en la que deseas calificar al estudiante:\");\r\n                    // Obtención de la asignatura en la que se quiere calificar al estudiante\r\n                    let asignaturaCalificar = prompt(\"Nombre de la asignatura:\");\r\n                    asignaturaCalificar = listaAsignaturas.busquedaAsignatura(asignaturaCalificar);\r\n                    console.log(\"Introduce la calificación que deseas asignar al estudiante:\");\r\n                    // Obtención de la calificación a asignar\r\n                    let calificacion = prompt(\"Calificación:\");\r\n                    // Calificación del estudiante\r\n                    estudianteCalificar.calificar(asignaturaCalificar, calificacion);\r\n                    } catch (error){\r\n                        console.log(\"Ha habido un error al calificar al estudiante\");\r\n                        console.log(error);\r\n                    }\r\n\r\n                    break;\r\n\r\n                /*\r\n                * Muestra el promedio de un estudiante.\r\n                */\r\n                case \"7\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre del estudiante del que deseas ver el promedio:\");\r\n                    // Obtención del estudiante del que se quiere ver el promedio\r\n                    let estudiantePromedio = prompt(\"Nombre del estudiante:\");\r\n                    estudiantePromedio = listaEstudiantes.busquedaEstudiante(estudiantePromedio);\r\n                    // Muestra del promedio\r\n                    console.log(estudiantePromedio.promedioEstudiante());\r\n\r\n                    break;\r\n\r\n                /*\r\n                * Muestra el reporte completo de los estudiantes.\r\n                */\r\n                case \"8\":\r\n                    console.clear();\r\n                    console.log(\"Reporte completo de los estudiantes:\");\r\n                    console.log(listaEstudiantes.reporte());\r\n\r\n                    break;\r\n\r\n                /*\r\n                * Salir del programa.\r\n                */\r\n                case \"9\":\r\n                    console.clear();\r\n                    console.log(\"Saliendo del programa...\");\r\n                    break;\r\n                default:\r\n                    console.clear();\r\n                    console.log(\"Selecciona un número entre 1 y 9 para elegir una opción\");\r\n                    mostrarMenu();\r\n\r\n            }\r\n            \r\n            break;\r\n\r\n\r\n        case \"2\":\r\n            console.clear();\r\n            console.log(\"Opciones a realizar con una asignatura:\");\r\n            console.log(\"1. Agregar asignatura\");\r\n            console.log(\"2. Eliminar asignatura\");\r\n            console.log(\"3. Calcular promedio de las calificaciones de una asignatura\");\r\n            console.log(\"4. Buscar asignatura\");\r\n            console.log(\"5. Calificar asignatura\");\r\n            console.log(\"6. Salir\");\r\n\r\n            const eleccionAsignatura = prompt(\"Selecciona el número de la opción deseada:\")\r\n            switch(eleccionAsignatura){\r\n                /*\r\n                * Agrega una asignatura a la lista de asignaturas.\r\n                */\r\n                case \"1\":\r\n                    console.clear();\r\n                    try{\r\n                    console.log(\"Introduce el nombre de la asignatura que deseas agregar\");\r\n                    // Obtención del nombre de la asignatura a agregar\r\n                    const nombreAsignatura = prompt(\"Nombre de la asignatura:\");\r\n                    // Creación de la asignatura\r\n                    const nuevaAsignatura = new _Asignatura_js__WEBPACK_IMPORTED_MODULE_1__.Asignatura(nombreAsignatura);\r\n                    // Agregado de la asignatura a la lista de asignaturas\r\n                    listaAsignaturas.agregaAsignatura(nuevaAsignatura);\r\n                    console.log(\"Asignatura agregada con éxito\");\r\n                    } catch (error){\r\n                        console.log(\"Ha habido un error al agregar la asignatura\");\r\n                        console.log(error);\r\n                    }\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Elimina una asignatura de la lista de asignaturas.\r\n                */\r\n                case \"2\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre de la asignatura que deseas eliminar\");\r\n                    // Obtención del nombre de la asignatura a eliminar\r\n                    const nombreAsignaturaEliminar = prompt(\"Nombre de la asignatura:\");\r\n                    // Búsqueda de la asignatura a eliminar\r\n                    const asignaturaAEliminar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaEliminar);\r\n                    // Eliminación de la asignatura\r\n                    listaAsignaturas.eliminaAsignatura(asignaturaAEliminar);\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Calcula el promedio de las calificaciones de una asignatura.\r\n                */\r\n                case \"3\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre de la asignatura de la que deseas calcular el promedio\");\r\n                    // Obtención del nombre de la asignatura de la que se quiere calcular el promedio\r\n                    const nombreAsignaturaPromedio = prompt(\"Nombre de la asignatura:\");\r\n                    // Búsqueda de la asignatura\r\n                    const asignaturaPromedio = listaAsignaturas.busquedaAsignatura(nombreAsignaturaPromedio);\r\n                    // Muestra del promedio\r\n                    console.log(asignaturaPromedio.calculaPromedio());\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Busca una asignatura en la lista de asignaturas.\r\n                */\r\n                case \"4\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre de la asignatura que deseas buscar\");\r\n                    // Obtención del nombre de la asignatura a buscar\r\n                    const nombreAsignaturaBuscar = prompt(\"Nombre de la asignatura:\");\r\n                    // Búsqueda de la asignatura\r\n                    const asignaturaABuscar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaBuscar);\r\n                    // Muestra de la asignatura\r\n                    console.log(asignaturaABuscar.toString());\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Califica a los estudiantes de una asignatura.\r\n                */\r\n                case \"5\":\r\n                    console.clear();\r\n\r\n                    // Obtenemos el nombre de la asignatura a calificar\r\n                    console.log(\"Introduce el nombre de la asignatura que deseas calificar\");\r\n                    const nombreAsignaturaCalificar = prompt(\"Nombre de la asignatura:\");\r\n                    // Búsqueda de la asignatura\r\n                    const asignaturaCalificar = listaAsignaturas.busquedaAsignatura(nombreAsignaturaCalificar);\r\n                    // Obtenemos la calificación a asignar\r\n                    console.log(\"Introduce la calificación que deseas asignar a la asignatura\");\r\n                    const calificacionAsignatura = prompt(\"Calificación:\");\r\n                    // Calificación de la asignatura\r\n                    asignaturaCalificar.calificar(calificacionAsignatura);\r\n\r\n                    break;\r\n\r\n                /*\r\n                * Salir del programa.\r\n                */\r\n                case \"6\":\r\n                    console.clear();\r\n                    console.log(\"Saliendo del programa...\");\r\n                    break;\r\n                \r\n                default:\r\n                    console.clear();\r\n                    console.log(\"Selecciona un número entre 1 y 5 para elegir una opción\");\r\n                    mostrarMenu();\r\n            }\r\n            \r\n            break;\r\n    \r\n        case \"3\":\r\n            console.clear();\r\n            console.log(\"Opciones a realizar con la lista de estudiantes:\")\r\n            console.log(\"1. Calcular promedio general de los estudiantes\");\r\n            console.log(\"2. Eliminar estudiantes de la lista\");\r\n            console.log(\"3. Buscar a un estudiante\")\r\n            console.log(\"4. Salir\")\r\n            \r\n            const eleccionListaEstudiantes = prompt(\"Selecciona el número de la opción deseada:\");\r\n\r\n            //? Opciones sobre la lista de estudiantes\r\n            switch(eleccionListaEstudiantes){\r\n\r\n                /*\r\n                * Calcula el promedio general de los estudiantes.\r\n                */\r\n                case \"1\":\r\n                    console.clear();\r\n                    \r\n                    // Muestra del promedio general de los estudiantes\r\n                    console.log(\"El promedio general de los estudiantes es: \" + listaEstudiantes.promedioEstudiantes());\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Elimina un estudiante de la lista de estudiantes.\r\n                */\r\n                case \"2\":\r\n                    console.clear();\r\n\r\n                    try{\r\n                    console.log(\"Introduce el nombre del estudiante que deseas eliminar de la lista\");\r\n                    // Obtención del nombre del estudiante a eliminar\r\n                    const nombreEstudiante = prompt(\"Nombre del estudiante:\");\r\n                    // Búsqueda del estudiante\r\n                    const estudianteAEliminar = listaEstudiantes.busquedaEstudiante(nombreEstudiante);\r\n                    // Eliminación del estudiante\r\n                    listaEstudiantes.eliminaEstudiante(estudianteAEliminar);\r\n                    } catch (error){\r\n                        console.log(\"Ha habido un error al eliminar al estudiante\");\r\n                        console.log(error);\r\n                    }\r\n                    \r\n                    break;\r\n                \r\n                /*\r\n                * Busca un estudiante en la lista de estudiantes.\r\n                */\r\n                case \"3\":\r\n                    console.clear();\r\n\r\n                    console.log(\"Introduce el nombre del estudiante que deseas buscar\");\r\n                    // Obtención del nombre del estudiante a buscar\r\n                    const nombreEstudianteBuscar = prompt(\"Nombre del estudiante:\");\r\n                    // Búsqueda del estudiante\r\n                    const estudianteABuscar = listaEstudiantes.busquedaEstudiante(nombreEstudianteBuscar);\r\n                    // Muestra del estudiante\r\n                    console.log(estudianteABuscar.toString());\r\n\r\n                    break;\r\n                \r\n                /*\r\n                * Salir del programa.\r\n                */\r\n                case \"4\":\r\n                    console.clear();\r\n                    console.log(\"Saliendo del programa...\");\r\n                    break;\r\n                \r\n                default:\r\n                    console.clear();\r\n                    console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\r\n                    mostrarMenu();\r\n            }\r\n\r\n            break;\r\n        \r\n        case \"4\":\r\n            console.clear();\r\n            console.log(\"Saliendo del programa...\")\r\n            break;\r\n    \r\n        default:\r\n            console.clear();\r\n            console.log(\"Selecciona un número entre 1 y 4 para elegir una opción\");\r\n            mostrarMenu();\r\n    }\r\n    }\r\n    \r\n    // Llamada al metodo de prueba de inicialización de datos\r\n    prueba();\r\n\r\n\r\n    // Llamada al método principal\r\n    mostrarMenu();\r\n\n\n//# sourceURL=webpack://main/./js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/main.js");
/******/ 	
/******/ })()
;